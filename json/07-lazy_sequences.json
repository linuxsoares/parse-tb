{"tag":"document","content":[{"tag":"chapter","content":[{"tag":"text","content":[" Calculando o infinito com lazy sequences"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"quote","content":[{"tag":"text","content":["\"The more you approach infinity, the deeper you penetrate terror\""]},{"tag":"text","content":["  -- Gustave Flaubert, escritor francês"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Eager e lazy evaluation"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Existem situações em que você precisará processar uma quantidade absurdamente grande de dados, ou então algum conjuntos de dados em que você simplesmente não sabe quando termina e nem mesmo se termina."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Por mais que pareça absurdo pensarmos em trabalhar com uma quantidade infinita de informação, a memória disponível para executarmos um software é limitada, e bem limitada."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Se você precisar processar um arquivo de log de 10GB, é bem possível que você não consiga carregá-lo todo em memória para então começar a trabalhar. Se os dados estão chegando pela rede, talvez vindos de uma comunicação entre aplicações, é possível também que a conexão dure dias ou meses sem interrupção. Esperar para carregar todos os dados na memória para então começar a trabalhar não faria o menor sentido."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Quando trabalhamos com vetores ou listas, todos os dados estão disponíveis em memória desde o início, o que limita bastante a quantidade de itens que podemos processar."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["range"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos começar com um exemplo absurdo e, usando a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["range"]}]},{"tag":"text","content":[", vamos tentar jogar uma lista infinita de números para dentro de um vetor."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["into"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(into [] (range))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; OutOfMemoryError Java heap space"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   um monte de linhas"]},{"tag":"br","content":null},{"tag":"code-text","content":[";     clojure.core/seq (core.clj:133)"]},{"tag":"br","content":null},{"tag":"code-text","content":[";     clojure.core/take-while/fn--4274 (core.clj:2636)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Bye for now!"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"img","content":[{"tag":"text","content":["images/capitulo_07/cpu.png label=cap07-cpu \"Muita memória e muito calor por nada\" w=60%"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A função "]},{"tag":"monospaced","content":[{"tag":"text","content":["range"]}]},{"tag":"text","content":[" sem parâmetros nos retorna uma lista de números que começa em zero e vai, teoricamente, até o infinito. É claro que uma hora ou outra vamos esbarrar nas limitações de memória da plataforma, mas isso não precisa acontecer tão depressa."]},{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["Protegendo os próprios pés"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Trabalhar com sequencias infinitas ou muito grandes no "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[" pode ser perigoso, uma vez que ele tentará exibir todos os itens na tela antes de retornar o comando para você."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Experimente executar o código abaixo para entender o que estou dizendo. Enquanto isso vou ali montar um quebra-cabeças de cinco mil peças e já volto."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(range)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["*print-length*"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para evitar que acidentalmente tenhamos que esperar uma vida inteira até que a memória acabe ou alcancemos um "]},{"tag":"italic","content":[{"tag":"text","content":["overflow"]}]},{"tag":"text","content":[" numérico, vamos dizer ao "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[" que ele deve limitar a quantidade de informação exibida na tela. Para isso, vamos alterar um estado global chamado "]},{"tag":"monospaced","content":[{"tag":"text","content":["*print-length*"]}]},{"tag":"text","content":[", que contém a quantidade de itens a serem exibidos."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(set! *print-length* 100)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos \"acidentalmente\" gerar uma sequencia infinita para ver como o "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[" se comporta."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(range)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 "]},{"tag":"br","content":null},{"tag":"code-text","content":["; ... mais um monte de números"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 95 96 97 98 99 ...)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ufa, parou no centésimo item. Vamos prosseguir em segurança. As reticências indicam que existem mais itens depois daquele ponto."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Já a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["into"]}]},{"tag":"text","content":[" joga essa lista para dentro de um vetor vazio, que representamos com "]},{"tag":"monospaced","content":[{"tag":"text","content":["▷ ◁"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Um vetor usa de "]},{"tag":"italic","content":[{"tag":"text","content":["eager evaluation"]}]},{"tag":"text","content":[", ou como já dissemos, precisa estar com todos os dados na memória para que possamos usá-lo. "]},{"tag":"italic","content":[{"tag":"text","content":["Eager"]}]},{"tag":"text","content":[" pode ser traduzido como "]},{"tag":"italic","content":[{"tag":"text","content":["apressado"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["afobado"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Felizmente, o Clojure tem um recurso chamado "]},{"tag":"italic","content":[{"tag":"text","content":["lazy evaluation"]}]},{"tag":"text","content":[", onde só um pedaço da lista fica em memória para que possamos trabalhar, deixando para carregar o restante apenas quando for necessário. Já "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":[" significa "]},{"tag":"italic","content":[{"tag":"text","content":["preguiçoso"]}]},{"tag":"text","content":[", o que não é algo negativo nesse contexto"]},{"tag":"ref","content":[{"tag":"text","content":["lazy-dev"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos usar o mesmo exemplo da lista infinita como exemplo."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def infinito (range))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(take 10 infinito)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (0 1 2 3 4 5 6 7 8 9)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A função "]},{"tag":"monospaced","content":[{"tag":"text","content":["range"]}]},{"tag":"text","content":[" retorna um tipo especial de lista chamada "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[". Os dados de uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" não são computados até que alguém peça. É por isso que pudemos jogar o resultado de "]},{"tag":"monospaced","content":[{"tag":"text","content":["(range)"]}]},{"tag":"text","content":[" em "]},{"tag":"monospaced","content":[{"tag":"text","content":["infinito"]}]},{"tag":"text","content":[" sem que a máquina fique travada ou a memória acabe."]},{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["O jeito Clojure"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"italic","content":[{"tag":"text","content":["Lazy sequences"]}]},{"tag":"text","content":[" são parte central do "]},{"tag":"italic","content":[{"tag":"text","content":["jeito Clojure"]}]},{"tag":"text","content":[" de resolver problemas. Muitos problemas que podem ser resolvidos com recursão também podem ser resolvidos de forma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":[", geralmente de forma mais rápida e elegante."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Pensar em soluções que façam uso de "]},{"tag":"italic","content":[{"tag":"text","content":["lazy evaluation"]}]},{"tag":"text","content":[" leva algum tempo e exige treino mas, uma vez que você quebre essa barreira, os resultados são recompensadores."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["take"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Na linha seguinte pedimos os dez primeiros itens de "]},{"tag":"monospaced","content":[{"tag":"text","content":["infinito"]}]},{"tag":"text","content":[" através da função "]},{"tag":"monospaced","content":[{"tag":"text","content":["take"]}]},{"tag":"text","content":[". Como resultado temos uma nova lista com dez números, gastando uma quantidade aceitável de memória e de processamento."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Boa parte das funções biblioteca padrão do Clojure que manipulam sequencias as tratam como "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":[". Isso significa que não precisamos aprender todo um novo conjunto de instruções para aproveitarmos as vantagens das "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequences"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["map"]}]},{"tag":"index","content":[{"tag":"text","content":["filter"]}]},{"tag":"index","content":[{"tag":"text","content":["reduce"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["As nossas já conhecidas funções "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["filter"]}]},{"tag":"text","content":[" devolvem "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequences"]}]},{"tag":"text","content":[", mesmo quando você passa um vetor para elas. Já a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["reduce"]}]},{"tag":"text","content":[" força a avaliação das sequências e nos retorna um valor escalar ao invés de uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos calcular a soma de todos os números pares, múltiplos de "]},{"tag":"italic","content":[{"tag":"text","content":["3"]}]},{"tag":"text","content":[", entre "]},{"tag":"italic","content":[{"tag":"text","content":["0"]}]},{"tag":"text","content":[" e "]},{"tag":"italic","content":[{"tag":"text","content":["1000"]}]},{"tag":"text","content":[", inclusive. Porém, vamos usar um passo a mais no nosso processamento simplesmente porque eu quero usar essas três funções. Se fosse um código de verdade, eu usaria o mínimo de processamento possível, mas a ideia aqui é quebrar o problema em partes pequenas para que fique fácil de entender e explicar."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Primeiro vamos pegar uma lista de números entre "]},{"tag":"italic","content":[{"tag":"text","content":["0"]}]},{"tag":"text","content":[" e "]},{"tag":"italic","content":[{"tag":"text","content":["500"]}]},{"tag":"text","content":[", inclusive."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def lista-inicial (range 0 501))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Em seguida vamos multiplicar todos os itens da lista por dois, para termos todos os números pares entre "]},{"tag":"italic","content":[{"tag":"text","content":["0"]}]},{"tag":"text","content":[" e "]},{"tag":"italic","content":[{"tag":"text","content":["1000"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def lista-pares (map #(* 2 %) lista-inicial))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos filtrar a lista para ficarmos apenas com os números que forem múltiplos de "]},{"tag":"italic","content":[{"tag":"text","content":["3"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def lista-multiplos (filter #(= 0 (mod % 3)) lista-pares))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Até aqui nós criamos três "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequences"]}]},{"tag":"text","content":[": uma quando usamos "]},{"tag":"monospaced","content":[{"tag":"text","content":["range"]}]},{"tag":"text","content":[", outra quando usamos "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" e a terceira quando utilizamos "]},{"tag":"monospaced","content":[{"tag":"text","content":["filter"]}]},{"tag":"text","content":[". Mas ainda assim não recebemos retorno nenhum."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Isso acontece simplesmente porque as "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequences"]}]},{"tag":"text","content":[" só vão nos retornar algum dado quando isso for realmente necessário. No nosso exemplo apenas criamos as sequencias e não as usamos em momento algum. Se nosso programa terminasse agora, nós não teriamos usado as sequencias para nada. Como elas não são tontas, preferiram ficar quietinhas sem gastar memória nem processamento."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora, ao usarmos "]},{"tag":"monospaced","content":[{"tag":"text","content":["reduce"]}]},{"tag":"text","content":[", cada um dos itens da lista vai ser solicitado, multiplicado, filtrado e então somado. No final de tudo teremos o resultado que procuramos."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def resultado (reduce + lista-multiplos))"]},{"tag":"br","content":null},{"tag":"code-text","content":["resultado"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 83166"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Perceba que o resultado só veio quando mandamos exibir o valor de "]},{"tag":"monospaced","content":[{"tag":"text","content":["resultado"]}]},{"tag":"text","content":[". quando simplesmente atribuimos a expressão com "]},{"tag":"monospaced","content":[{"tag":"text","content":["reduce"]}]},{"tag":"text","content":[" em "]},{"tag":"monospaced","content":[{"tag":"text","content":["resultado"]}]},{"tag":"text","content":[", o processo continuou quietinho até que fosse necessário retornar um valor."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["->>"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Podemos reescrever o nosso código usando o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["->>"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def resultado (->> (range 0 501)"]},{"tag":"br","content":null},{"tag":"code-text","content":["                    (map #(* 2 %))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                    (filter #(= 0 (mod % 3)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                    (reduce +)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 83166"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Como uma lazy sequence funciona por dentro"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Até aqui conseguimos ver o que faz a "]},{"tag":"italic","content":[{"tag":"text","content":["lazy evaluation"]}]},{"tag":"text","content":[", mas estamos com algumas perguntas que estão sem respostas."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A primeira delas é "]},{"tag":"italic","content":[{"tag":"text","content":["em que momento exatamente a sequencia é avaliada?"]}]},{"tag":"text","content":[". Depois eu perguntaria "]},{"tag":"italic","content":[{"tag":"text","content":["mas não vou gastar mais processamento se eu tiver que avaliar de forma lazy a mesma sequencia duas vezes?"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Outra pergunta interessante é "]},{"tag":"italic","content":[{"tag":"text","content":["como o Clojure sabe a hora de parar de calcular e trazer o resultado?"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E a pergunta mais importante de todas, e a que me atormentou por muito tempo: "]},{"tag":"italic","content":[{"tag":"text","content":["como eu vou pensar de forma lazy se até agora isso tudo parece magia negra com o resultado automagicamente aparecendo para mim?"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Por isso é importante entendermos como uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" funciona por dentro. É simples, rápido e relativamente indolor."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Antes de mais nada, devemos ter em mente que uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" é uma lista ligada. Como em qualquer lista ligada, cada nó contém pelo menos duas propriedades, sendo a primeira contendo o valor do nó atual e o segundo contendo uma referência ao próximo nó. Um nó de uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" contém ainda uma terceira propriedade, contendo uma função responsável por gerar o próximo item. Essa função é conhecida como "]},{"tag":"italic","content":[{"tag":"text","content":["thunk"]}]},{"tag":"ref","content":[{"tag":"text","content":["thunk-paper"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"todo","content":[{"tag":"text","content":["desenhar diagrama"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O uso de "]},{"tag":"italic","content":[{"tag":"text","content":["thunk"]}]},{"tag":"text","content":[" já é nosso conhecido, apesar de não termos sidos apresentados a esse nome ainda. Quando aprendemos sobre "]},{"tag":"italic","content":[{"tag":"text","content":["trampolines"]}]},{"tag":"text","content":[", no capítulo "]},{"tag":"ref-label","content":[{"tag":"text","content":["capitulo-funcoes"]}]},{"tag":"text","content":[", vimos que as funções "]},{"tag":"italic","content":[{"tag":"text","content":["trampoline"]}]},{"tag":"text","content":[" retornavam outra função ao invés de um valor qualquer. "]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Essa outra função seria executada quando necessário, e também retornaria uma função. Dessa forma podemos fazer recursões mútuas sem consumir a pilha de chamadas da JVM."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Essa função que seria executada em outro momento é um "]},{"tag":"italic","content":[{"tag":"text","content":["thunk"]}]},{"tag":"text","content":[", e o fato dela ser executada apenas quando necessário, e não imediatamente, foi nosso primeiro contato com "]},{"tag":"italic","content":[{"tag":"text","content":["lazy loading"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Uma vez que o "]},{"tag":"italic","content":[{"tag":"text","content":["thunk"]}]},{"tag":"text","content":[" é executado, o nó passa a ter um valor e outro nó é criado, com seu respectivo "]},{"tag":"italic","content":[{"tag":"text","content":["thunk"]}]},{"tag":"text","content":[" e ainda sem um valor. Se você precisar acessar um nó que já foi avaliado, receberá imediatamente seu valor, sem a necessidade de um novo processamento."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos ver isso funcionando na prática, passo a passo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Primeiro, vamos criar uma sequencia chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["lista"]}]},{"tag":"text","content":[" usando a nossa conhecida função "]},{"tag":"monospaced","content":[{"tag":"text","content":["range"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def lista (range 1 101))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Em seguida, vamos criar outra sequencia chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["multiplo-3"]}]},{"tag":"text","content":[" usando "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[", com uma função que vai multiplicar cada item por "]},{"tag":"italic","content":[{"tag":"text","content":["3"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def multiplo-3   (map #(do (print \"m\" % \" - \")"]},{"tag":"br","content":null},{"tag":"code-text","content":["                            (* % 3))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                       lista))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O pulo do gato aqui está no fato da função usada para mapear causar efeitos colaterais, nos permitindo entender exatamente o que está acontecendo, passo a passo. Nossa função vai imprimir a letra "]},{"tag":"monospaced","content":[{"tag":"text","content":["m"]}]},{"tag":"text","content":[", de "]},{"tag":"bold","content":[{"tag":"text","content":["m"]}]},{"tag":"text","content":["apa, antes do número que está sendo processado."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Isso vai nos ajudar também a entender porque não devemos usar funções com efeitos colaterais para processar "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequencies"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A mesma coisa acontece com a sequencia "]},{"tag":"monospaced","content":[{"tag":"text","content":["pares"]}]},{"tag":"text","content":[" que vamos criar com a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["filter"]}]},{"tag":"text","content":[". Vamos imprimir um "]},{"tag":"monospaced","content":[{"tag":"text","content":["f"]}]},{"tag":"text","content":[", de "]},{"tag":"bold","content":[{"tag":"text","content":["f"]}]},{"tag":"text","content":["iltro, antes do número que está sendo filtrado. Nosso filtro vai manter apenas os números pares."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def pares (filter #(do (print \"f\" % \" - \")"]},{"tag":"br","content":null},{"tag":"code-text","content":["                        (even? %))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                   mapped))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Antes de continuarmos, atenção para o fato de que tanto "]},{"tag":"monospaced","content":[{"tag":"text","content":["multiplo-3"]}]},{"tag":"text","content":[" quanto "]},{"tag":"monospaced","content":[{"tag":"text","content":["pares"]}]},{"tag":"text","content":[" já são "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequences"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Nenhum resultado foi impresso ao criarmos essas três sequencias exatamente porque são "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":[" e não mandamos que elas fossem avaliadas ainda."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos mandar avaliar as sequencias pedindo para recebermos apenas o primeiro item da sequencia."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(first pares)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; m 1  - m 2  - m 3  - m 4  - m 5  - m 6  - m 7  - m 8  - m 9  -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; m 10  - m 11  - m 12  - m 13  - m 14  - m 15  - m 16  - m 17 -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; m 18  - m 19  - m 20  - m 21  - m 22  - m 23  - m 24  - m 25 -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; m 26  - m 27  - m 28  - m 29  - m 30  - m 31  - m 32  - f 3  -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; f 6  - f 9  - f 12  - f 15  - f 18  - f 21  - f 24  - f 27  - "]},{"tag":"br","content":null},{"tag":"code-text","content":["; f 30  - f 33  - f 36  - f 39  - f 42  - f 45  - f 48  - f 51 -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; f 54  - f 57  - f 60  - f 63  - f 66  - f 69  - f 72  - f 75 -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; f 78  - f 81  - f 84  - f 87  - f 90  - f 93  - f 96  - 6"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos analizar o que foi impresso para entendermos como a "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" funciona por dentro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Primeiro, vamos olhar os números precedidos da letra m, que foram processados pelo map. Nossa sequencia original vai de 1 a 100, mas a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" recebeu apenas os números de 1 a 32. "]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O número mágico "]},{"tag":"italic","content":[{"tag":"text","content":["32"]}]},{"tag":"text","content":[" é o tamanho padrão de um "]},{"tag":"italic","content":[{"tag":"text","content":["chunk"]}]},{"tag":"text","content":[" (não confunda com "]},{"tag":"italic","content":[{"tag":"text","content":["thunk"]}]},{"tag":"text","content":[", já que cientistas da computação não têm a menor criatividade para nomes), que é um pedaço da sequencia que é pré-processada e armazenada em memória. Segundo o criador da linguagem, dessa forma você gasta o processamento uma única vez nesse pedaço de sequência e ganha em velocidade no resto dela, além de reduzir do trabalho do "]},{"tag":"italic","content":[{"tag":"text","content":["garbage collector"]}]},{"tag":"text","content":[" do Java em sequencias com muitos itens. "]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Lá na versão 1.1 do Clojure (estamos na versão 1.7), uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" era processada item a item. Na versão seguinte ela passou a ser chamada também de 'chunked sequence' por conta desse bloco de dados processados de uma única vez."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Então nós temos em memória uma sequencia pré-processada com números de "]},{"tag":"italic","content":[{"tag":"text","content":["1"]}]},{"tag":"text","content":[" a "]},{"tag":"italic","content":[{"tag":"text","content":["32"]}]},{"tag":"text","content":[" multiplicados por "]},{"tag":"italic","content":[{"tag":"text","content":["3"]}]},{"tag":"text","content":[". É aí que encontramos a continuação do processamento, dessa vez iniciando com a letra "]},{"tag":"monospaced","content":[{"tag":"text","content":["f"]}]},{"tag":"text","content":[". Na tela temos "]},{"tag":"monospaced","content":[{"tag":"text","content":["f 3"]}]},{"tag":"text","content":[", "]},{"tag":"monospaced","content":[{"tag":"text","content":["f 6"]}]},{"tag":"text","content":[", "]},{"tag":"monospaced","content":[{"tag":"text","content":["f 9"]}]},{"tag":"text","content":[" e assim por diante."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Aqui também são processados blocos de "]},{"tag":"italic","content":[{"tag":"text","content":["32"]}]},{"tag":"text","content":[" itens de cada vez. Como a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" não modifica o tamanho da lista que é processada, não vemos acontecer nada de especial aqui, já que "]},{"tag":"monospaced","content":[{"tag":"text","content":["filter"]}]},{"tag":"text","content":[" também acaba processando uma lista com "]},{"tag":"italic","content":[{"tag":"text","content":["32"]}]},{"tag":"text","content":[" itens."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Finalmente, o último item da lista impressa na tela é o número "]},{"tag":"italic","content":[{"tag":"text","content":["6"]}]},{"tag":"text","content":[", que é o retorno do processamento, já que é o primeiro número par múltiplo de "]},{"tag":"italic","content":[{"tag":"text","content":["3"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos ver agora o que acontece se quisermos receber novamente o primeiro item da lista, repetindo a instrução anterior:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(first pares)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 6"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora recebemos apenas o valor "]},{"tag":"italic","content":[{"tag":"text","content":["6"]}]},{"tag":"text","content":[", sem nenhum processamento por baixo dos panos. Como eu já havia dito, temos um pedaço da sequencia contendo os valores já processados, o que nos faz ganhar algum tempo já que não precisamos calcular novamente o valor. O valor do primeiro item foi "]},{"tag":"italic","content":[{"tag":"text","content":["memoizado"]}]},{"tag":"text","content":[", sendo o processamento substituido pelo seu resultado."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Caso você use uma função que cause efeitos colaterais, como é o nosso caso, teremos a execução da função apenas na primeira vez, como já vimos acontecer ao estudarmos "]},{"tag":"italic","content":[{"tag":"text","content":["memoização"]}]},{"tag":"text","content":[". Se você depende da execução da função toda vez que processar a lista, então "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" não é o recurso mais adequado para a situação."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos ver agora qual é o segundo item da sequencia. Para isso vamos criar uma nova sequencia contendo o resto da sequencia, ou seja, a sequencia sem o primeiro item. Em seguida vamos pegar o primeiro item dessa nova sequencia."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def resto (rest pares))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(first resto)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 12"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["rest"]}]},{"tag":"index","content":[{"tag":"text","content":["first"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Aqui também nada foi processado ao criarmos a nova sequencia, já que "]},{"tag":"monospaced","content":[{"tag":"text","content":["rest"]}]},{"tag":"text","content":[" também retorna uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[". Quando utilizamos "]},{"tag":"monospaced","content":[{"tag":"text","content":["first"]}]},{"tag":"text","content":[" para pegar o primeiro item dessa nova sequencia novamente não houve processamento, já que temos até o número "]},{"tag":"italic","content":[{"tag":"text","content":["96"]}]},{"tag":"text","content":[" guardado em memória."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E o que acontece se quisermos o que estiver do número 96 em diante?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Nesse caso o Clojure vai processar mais 32 itens e armazená-los em memória, até que a sequencia original, que no nosso caso terá até "]},{"tag":"italic","content":[{"tag":"text","content":["100"]}]},{"tag":"text","content":[" itens, se esgote."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos forçar o processamento para além do número 96 para vermos o que acontece:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(take 32 pares)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 m 33  - m 34  -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; m 35  - m 36  - m 37  - m 38  - m 39  - m 40  - m 41  - m 42 -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; m 43  - m 44  - m 45  - m 46  - m 47  - m 48  - m 49  - m 50 - "]},{"tag":"br","content":null},{"tag":"code-text","content":["; m 51  - m 52  - m 53  - m 54  - m 55  - m 56  - m 57  - m 58 -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; m 59  - m 60  - m 61  - m 62  - m 63  - m 64  - f 99  - f 102 -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; f 105  - f 108  - f 111  - f 114  - f 117  - f 120  - f 123  - "]},{"tag":"br","content":null},{"tag":"code-text","content":["; f 126  - f 129  - f 132  - f 135  - f 138  - f 141  - f 144  - "]},{"tag":"br","content":null},{"tag":"code-text","content":["; f 147  - f 150  - f 153  - f 156  - f 159  - f 162  - f 165  -"]},{"tag":"br","content":null},{"tag":"code-text","content":["; f 168  - f 171  - f 174  - f 177  - f 180  - f 183  - f 186  - "]},{"tag":"br","content":null},{"tag":"code-text","content":["; f 189  - f 192  - 96 102 108 114 120 126 132 138 144 150 156 "]},{"tag":"br","content":null},{"tag":"code-text","content":["; 162 168 174 180 186 192)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Analisando novamente o que foi impresso, vemos que os números pares e múltiplos de 3 entre 6 e 90 já estavam em memória. Quando pedimos o número seguinte, a função map processou o "]},{"tag":"italic","content":[{"tag":"text","content":["chunk"]}]},{"tag":"text","content":[" seguinte da nossa lista original, que contém os números de 33 a 64, que foram multiplicados por 3 e então filtrados, sendo armazenados somente os números pares."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Se repetirmos a instrução, veremos que o processamento não ocorre novamente:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(take 32 pares)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96 102 108 114"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 120 126 132 138 144 150 156 162 168 174 180 186 192)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Os valores foram memoizados, e por conta disso as funções passadas por parâmetro para "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["filter"]}]},{"tag":"text","content":[" não foram executadas novamente."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No nosso exemplo, o Clojure vai pegar os "]},{"tag":"italic","content":[{"tag":"text","content":["32"]}]},{"tag":"text","content":[" primeiros números de "]},{"tag":"monospaced","content":[{"tag":"text","content":["lista"]}]},{"tag":"text","content":[", no segundo passo serão utilizados os números de "]},{"tag":"italic","content":[{"tag":"text","content":["33"]}]},{"tag":"text","content":[" a "]},{"tag":"italic","content":[{"tag":"text","content":["64"]}]},{"tag":"text","content":[", depois de "]},{"tag":"italic","content":[{"tag":"text","content":["65"]}]},{"tag":"text","content":[" a "]},{"tag":"italic","content":[{"tag":"text","content":["96"]}]},{"tag":"text","content":[" e, como nossa lista tinha "]},{"tag":"italic","content":[{"tag":"text","content":["100"]}]},{"tag":"text","content":[" números, o último passo vai processar o que houver entre "]},{"tag":"italic","content":[{"tag":"text","content":["97"]}]},{"tag":"text","content":[" e "]},{"tag":"italic","content":[{"tag":"text","content":["100"]}]},{"tag":"text","content":[". É assim que o Clojure sabe a hora de parar."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Caso estivessemos lidando com uma lista infinita, o processamento só pararia ao matarmos o processo da aplicação ou ao encontrarmos um número grande o bastante para que o Clojure não consiga armazená-lo."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Perdendo a cabeça"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O nosso exemplo funciona muito bem com sequencias que caibam na memória, mas com uma sequência muito grande nós teríamos o mesmo problema de quando tentamos jogar uma sequencia infinita para dentro de um vetor."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos escrever um código que conte a quantidade de itens múltiplos de "]},{"tag":"italic","content":[{"tag":"text","content":["33"]}]},{"tag":"text","content":[" e "]},{"tag":"italic","content":[{"tag":"text","content":["17"]}]},{"tag":"text","content":[" existentes entre "]},{"tag":"italic","content":[{"tag":"text","content":["1"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["330.000.000.000"]}]},{"tag":"text","content":[", o que deve dar um número bem grande."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def lista-inteira (->> (range 1 1e10)"]},{"tag":"br","content":null},{"tag":"code-text","content":["                        (map #(* % 33))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                        (filter #(= 0 (mod % 17)))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(count lista-inteira)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; OutOfMemoryError GC overhead limit exceeded  "]},{"tag":"br","content":null},{"tag":"code-text","content":["; java.lang.Long.valueOf (:-1)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O "]},{"tag":"italic","content":[{"tag":"text","content":["garbage collector"]}]},{"tag":"text","content":[" do Java bem que tentou, mas mesmo com o poder das "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequences"]}]},{"tag":"text","content":[" tivemos um estouro de memória."]},{"tag":"br","content":null}]},{"tag":"img","content":[{"tag":"text","content":["images/capitulo_07/memory_1.png label=cap07-memory-1 \"Consumo de memória da nossa contagem de itens\" w=40%"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Existe uma forma de lidar com isso, e é onde "]},{"tag":"italic","content":[{"tag":"text","content":["lazy evaluation"]}]},{"tag":"text","content":[" mostra a que veio."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Sabemos que, quando criamos uma sequencia gigantesca, que estamos chamando de infinita apenas para fins didáticos, apenas "]},{"tag":"italic","content":[{"tag":"text","content":["32"]}]},{"tag":"text","content":[" itens são gerados de cada vez. Se usarmos os itens conforme eles forem aparecendo e em seguida descartarmos, teremos um consumo baixo e constante de memória, independente da quantidade de itens que forem processados."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["InputStream"]}]},{"tag":"index","content":[{"tag":"text","content":["OutputStream"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Quando lemos uma sequencia do começo para o fim, sem voltar atrás na leitura e descartando o que já foi trabalhado, dizemos que temos um "]},{"tag":"italic","content":[{"tag":"text","content":["stream"]}]},{"tag":"text","content":[". Se você acompanhou as novidades do Java 8, ou mesmo já trabalhou com os consagrados "]},{"tag":"monospaced","content":[{"tag":"text","content":["InputStream"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["OutputStream"]}]},{"tag":"text","content":[" do Java, você já fez isso mesmo sem perceber."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar uma função chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["count-melhor"]}]},{"tag":"text","content":[", que conta os itens da sequencia e os descarta em seguida."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como fazemos para descartar um item? Basta não ter ninguém olhando para ele que o próprio "]},{"tag":"italic","content":[{"tag":"text","content":["garbage collector"]}]},{"tag":"text","content":[" da JVM faz o resto. Simples assim."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar uma versão usando recursão. Sabemos que "]},{"tag":"italic","content":[{"tag":"text","content":["tail call recursion"]}]},{"tag":"text","content":[" não consome a pilha de execução, então podemos lidar com sequencias realmente grandes sem medo de derrubarmos a aplicação."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn count-melhor [lista]    ; 1"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (loop [lista lista          ; 2"]},{"tag":"br","content":null},{"tag":"code-text","content":["         items 0]             ; 3"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (if (empty? lista)        ; 4"]},{"tag":"br","content":null},{"tag":"code-text","content":["      items                   ; 5"]},{"tag":"br","content":null},{"tag":"code-text","content":["      (recur (rest lista)     ; 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["             (inc items)))))  ; 7"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Basicamente a função recebe uma sequencia como parâmetro e avança item a item adicionando "]},{"tag":"italic","content":[{"tag":"text","content":["1"]}]},{"tag":"text","content":[" em "]},{"tag":"monospaced","content":[{"tag":"text","content":["items"]}]},{"tag":"text","content":[". Se a sequencia estiver vazia, o processo para e recebemos a quantidade de itens que foram contados."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Trabalhando dessa forma estamos descartando o primeiro item da sequencia a cada iteração, enquanto a própria "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" se encarrega de só gerar o "]},{"tag":"italic","content":[{"tag":"text","content":["chunk"]}]},{"tag":"text","content":[" seguinte quando for necessário. No pior caso, teremos "]},{"tag":"italic","content":[{"tag":"text","content":["32"]}]},{"tag":"text","content":[" itens da sequencia em memória, ao invés de milhões deles."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos comparar o funcionamento da nossa função com a "]},{"tag":"monospaced","content":[{"tag":"text","content":["count"]}]},{"tag":"text","content":[" padrão do Clojure para ver se está tudo de acordo com o planejado."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(count '())"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 0"]},{"tag":"br","content":null},{"tag":"code-text","content":["(count-melhor '())"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 0"]},{"tag":"br","content":null},{"tag":"code-text","content":["(count (range 1 11))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 10"]},{"tag":"br","content":null},{"tag":"code-text","content":["(count-melhor (range 1 11))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 10"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Tudo em conformidade, vamos ao teste final. Apenas como um alerta, esse processo vai demorar muito, então deixe o computador de lado um pouco e vá correr uma maratona."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def lista-inteira (->> (range 1 1e10)"]},{"tag":"br","content":null},{"tag":"code-text","content":["                        (map #(* % 33))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                        (filter #(= 0 (mod % 17)))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(count-melhor lista-inteira)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; OutOfMemoryError GC overhead limit exceeded"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Opa, continuamos com o mesmo erro, mesmo tendo alterado a abordagem. Hora de usarmos o que aprendemos até aqui para descobrir a causa do problema."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["pst"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Primeiro, vamos executar a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["pst"]}]},{"tag":"text","content":[" para analisarmos a pilha de chamadas no momento do erro e vermos onde exatamente ocorreu o problema."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["java.lang.OutOfMemoryError: GC overhead limit exceeded"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (Unknown Source) java.lang.Long.valueOf"]},{"tag":"br","content":null},{"tag":"code-text","content":[" Numbers.java:1661 clojure.lang.Numbers.num"]},{"tag":"br","content":null},{"tag":"code-text","content":["  Numbers.java:447 clojure.lang.Numbers$LongOps.add"]},{"tag":"br","content":null},{"tag":"code-text","content":["  Numbers.java:126 clojure.lang.Numbers.add"]},{"tag":"br","content":null},{"tag":"code-text","content":["     core.clj:2746 clojure.core/range[fn]"]},{"tag":"br","content":null},{"tag":"code-text","content":["   LazySeq.java:40 clojure.lang.LazySeq.sval"]},{"tag":"br","content":null},{"tag":"code-text","content":["   LazySeq.java:49 clojure.lang.LazySeq.seq"]},{"tag":"br","content":null},{"tag":"code-text","content":["       RT.java:484 clojure.lang.RT.seq"]},{"tag":"br","content":null},{"tag":"code-text","content":["      core.clj:133 clojure.core/seq"]},{"tag":"br","content":null},{"tag":"code-text","content":["     core.clj:2551 clojure.core/map[fn]"]},{"tag":"br","content":null},{"tag":"code-text","content":["   LazySeq.java:40 clojure.lang.LazySeq.sval"]},{"tag":"br","content":null},{"tag":"code-text","content":["   LazySeq.java:49 clojure.lang.LazySeq.seq"]},{"tag":"br","content":null},{"tag":"code-text","content":["       RT.java:484 clojure.lang.RT.seq"]},{"tag":"br","content":null},{"tag":"code-text","content":["      core.clj:133 clojure.core/seq"]},{"tag":"br","content":null},{"tag":"code-text","content":["     core.clj:2595 clojure.core/filter[fn]"]},{"tag":"br","content":null},{"tag":"code-text","content":["   LazySeq.java:40 clojure.lang.LazySeq.sval"]},{"tag":"br","content":null},{"tag":"code-text","content":["   LazySeq.java:49 clojure.lang.LazySeq.seq"]},{"tag":"br","content":null},{"tag":"code-text","content":["       RT.java:484 clojure.lang.RT.seq"]},{"tag":"br","content":null},{"tag":"code-text","content":["      core.clj:133 clojure.core/seq"]},{"tag":"br","content":null},{"tag":"code-text","content":["     core.clj:5706 clojure.core/empty?"]},{"tag":"br","content":null},{"tag":"code-text","content":["  NO_SOURCE_FILE:4 user/count-melhor"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["empty?"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Começando sempre de baixo para cima, temos a chamada à função "]},{"tag":"monospaced","content":[{"tag":"text","content":["count-melhor"]}]},{"tag":"text","content":[", e em seguida temos a chamada a "]},{"tag":"monospaced","content":[{"tag":"text","content":["empty?"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["count"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A primeira coisa que podemos pensar ao ver que o problema começa com "]},{"tag":"monospaced","content":[{"tag":"text","content":["empty?"]}]},{"tag":"text","content":[" é que essa função força a avaliação da sequencia inteira. Afinal de contas, poderíamos dizer que um coleção é vazia se "]},{"tag":"monospaced","content":[{"tag":"text","content":["count"]}]},{"tag":"text","content":[" for igual a zero, concorda? Sabendo que usar o "]},{"tag":"monospaced","content":[{"tag":"text","content":["count"]}]},{"tag":"text","content":[" padrão não está dando certo, vamos investigar o motivo olhando o código fonte de "]},{"tag":"monospaced","content":[{"tag":"text","content":["empty?"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(source empty?)"]},{"tag":"br","content":null},{"tag":"code-text","content":[";; removidos os metadados e a documentação"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (defn empty? [coll]"]},{"tag":"br","content":null},{"tag":"code-text","content":[";    (not (seq coll)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["nil"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Não há nenhuma ocorrência de "]},{"tag":"monospaced","content":[{"tag":"text","content":["count"]}]},{"tag":"text","content":[" dentro de "]},{"tag":"monospaced","content":[{"tag":"text","content":["empty"]}]},{"tag":"text","content":[". Ao passarmos uma sequencia vazia para "]},{"tag":"monospaced","content":[{"tag":"text","content":["seq"]}]},{"tag":"text","content":[", temos de volta "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":[". Usando "]},{"tag":"italic","content":[{"tag":"text","content":["nil punning"]}]},{"tag":"text","content":[" com o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["not"]}]},{"tag":"text","content":[" temos uma forma elegante de saber se a sequencia está vazia ou não."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["seq"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A única coisa que podemos sublinhar aqui é que "]},{"tag":"monospaced","content":[{"tag":"text","content":["seq"]}]},{"tag":"text","content":[" força a avaliação do primeiro item da sequencia, assim como acontece com "]},{"tag":"monospaced","content":[{"tag":"text","content":["first"]}]},{"tag":"text","content":[", o que não causaria um estouro de memória."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Tudo indica que o problema não está no uso de "]},{"tag":"monospaced","content":[{"tag":"text","content":["empty?"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Olhando o código como um todo, incluindo a parte onde usamos "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["filter"]}]},{"tag":"text","content":[", vamos perceber que estamos guardando a coleção dentro de "]},{"tag":"monospaced","content":[{"tag":"text","content":["lista-inteira"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Isso significa que "]},{"tag":"monospaced","content":[{"tag":"text","content":["lista-inteira"]}]},{"tag":"text","content":[" está apontando para o início da sequencia. Por mais que nossa função "]},{"tag":"monospaced","content":[{"tag":"text","content":["count-melhor"]}]},{"tag":"text","content":[" seja recheada de boas intenções, lembre-se que estamos lidando com uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[", que é uma estrutura persistente de dados."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Voltando um pouco no que aprendemos, lembre-se que uma estrutura persistente de dados é imutável e compartilha partes dos dados para que não seja necessário processar e copiar novamente dados que nunca serão alterados."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["É uma estratégia bem inteligente se você não tiver nenhuma referência ao início da sequencia. Ao fazer isso, o "]},{"tag":"italic","content":[{"tag":"text","content":["garbage collector"]}]},{"tag":"text","content":[" da JVM não vai fazer a limpeza por entender que alguém vai usar aqueles dados."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Voltando ao nosso código, o que acontece é que, enquanto nossa função "]},{"tag":"monospaced","content":[{"tag":"text","content":["count-melhor"]}]},{"tag":"text","content":[" descarta o começo da sequencia a cada recursão, o "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["lista-inteira"]}]},{"tag":"text","content":[" faz exatamente o que o nome diz, guardando em memória a lista inteira. Um joga água para fora do barco enquanto o outro faz um buraco maior no casco."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Guardar uma referência para o início da sequencia, em inglês "]},{"tag":"italic","content":[{"tag":"text","content":["retain the head"]}]},{"tag":"text","content":[", é o erro mais comum que pode acontecer quando lidamos com "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequences"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["Cabeça e rabo"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Uma sequencia pode ser dividida em duas partes distintas. A "]},{"tag":"italic","content":[{"tag":"text","content":["cabeça"]}]},{"tag":"text","content":[" é formada pelo primeiro elemento, e o "]},{"tag":"italic","content":[{"tag":"text","content":["rabo"]}]},{"tag":"text","content":[" contém todo o resto da sequencia."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Tanto que inglês é comum vermos os termos "]},{"tag":"italic","content":[{"tag":"text","content":["head"]}]},{"tag":"text","content":[" e "]},{"tag":"italic","content":[{"tag":"text","content":["tail"]}]},{"tag":"text","content":[" ao separarmos o primeiro item de uma sequencia do resto. "]},{"tag":"italic","content":[{"tag":"text","content":["Head"]}]},{"tag":"text","content":[" e "]},{"tag":"italic","content":[{"tag":"text","content":["tail"]}]},{"tag":"text","content":[" também são, respectivamente, os nomes em inglês da "]},{"tag":"italic","content":[{"tag":"text","content":["cara"]}]},{"tag":"text","content":[" e da "]},{"tag":"italic","content":[{"tag":"text","content":["coroa"]}]},{"tag":"text","content":[" de uma moeda."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A solução para isso costuma ser simples: livre-se de quem está apontando para o início da sequencia."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Sem mexer em uma linha de código da nossa função, vamos reescrever a nossa contagem."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":[";; o código aqui continua o mesmo"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defn count-melhor [lista]    ; 1"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (loop [lista lista          ; 2"]},{"tag":"br","content":null},{"tag":"code-text","content":["         items 0]             ; 3"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (if (empty? lista)        ; 4"]},{"tag":"br","content":null},{"tag":"code-text","content":["      items                   ; 5"]},{"tag":"br","content":null},{"tag":"code-text","content":["      (recur (rest lista)     ; 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["             (inc items)))))  ; 7"]},{"tag":"br","content":null},{"tag":"code-text","content":[";; e aqui vamos guardar a contagem, e não a lista"]},{"tag":"br","content":null},{"tag":"code-text","content":["(def contagem (->> (range 1 1e10)"]},{"tag":"br","content":null},{"tag":"code-text","content":["                   (map #(* % 33))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                   (filter #(= 0 (mod % 17)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                   count-melhor))"]},{"tag":"br","content":null},{"tag":"code-text","content":["contagem"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 588235294"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora "]},{"tag":"monospaced","content":[{"tag":"text","content":["count-melhor"]}]},{"tag":"text","content":[" recebe pedaços da sequencia gigante gerada por "]},{"tag":"monospaced","content":[{"tag":"text","content":["range"]}]},{"tag":"text","content":[" e vai descartando o que já foi computado, mantendo o consumo de memória constante e não fazendo a aplicação cair por exaustão."]},{"tag":"br","content":null}]},{"tag":"img","content":[{"tag":"text","content":["images/capitulo_07/memory_2.png label=cap07-memory-1 \"Consumo constante de memória\" w=40%"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No início do capítulo eu disse que muitos problemas que podem ser resolvidos com recursão também podem ser resolvidos de forma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":[", geralmente de forma mais rápida e elegante."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para demonstrar isso, vamos criar outra função chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["count-melhor-ainda"]}]},{"tag":"text","content":[" que efetua a contagem de forma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":[" através da função "]},{"tag":"monospaced","content":[{"tag":"text","content":["reduce"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn count-melhor-ainda [lista]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (reduce (fn [contagem _] "]},{"tag":"br","content":null},{"tag":"code-text","content":["            (inc contagem)) "]},{"tag":"br","content":null},{"tag":"code-text","content":["          0 "]},{"tag":"br","content":null},{"tag":"code-text","content":["          lista))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Sabemos que "]},{"tag":"monospaced","content":[{"tag":"text","content":["reduce"]}]},{"tag":"text","content":[" recebe uma função que vai processar cada um dos itens da sequencia."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Essa função recebe dois parâmetros, sendo o primeiro com o valor acumulado até aquele momento e o segundo com o valor da sequencia que está sendo processado. No final do processo temos um valor escalar resultante do processamento de todos os itens da sequencia."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O terceiro argumento passado para "]},{"tag":"monospaced","content":[{"tag":"text","content":["reduce"]}]},{"tag":"text","content":[" é o valor inicial a ser acumulado. Nós vamos usar "]},{"tag":"italic","content":[{"tag":"text","content":["0"]}]},{"tag":"text","content":[" para que uma sequencia vazia retorne um tamanho "]},{"tag":"italic","content":[{"tag":"text","content":["0"]}]},{"tag":"text","content":[". Finalmente, o último parâmetro contém a sequencia propriamente dita."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A nossa função passada para "]},{"tag":"monospaced","content":[{"tag":"text","content":["reduce"]}]},{"tag":"text","content":[" tem dois parâmetros, um chamado "]},{"tag":"monospaced","content":[{"tag":"text","content":["contagem"]}]},{"tag":"text","content":[", que contém realmente o valor da contagem dos itens, e o segundo chamado "]},{"tag":"monospaced","content":[{"tag":"text","content":["_"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Demos esse nome sem graça para o parâmetro para indicar "]},{"tag":"italic","content":[{"tag":"text","content":["ao programador"]}]},{"tag":"text","content":[" que aquele parâmetro não vai ser usado para nada. Você poderia dar qualquer nome que quisesse, incluindo "]},{"tag":"monospaced","content":[{"tag":"text","content":["atual"]}]},{"tag":"text","content":[" ou "]},{"tag":"monospaced","content":[{"tag":"text","content":["item"]}]},{"tag":"text","content":[". O que importa é que o programador vai olhar para o código e ver de cara que aquele parâmetro não vai ser utilizado. Para o Clojure tanto faz o nome que você estiver usando, desde que seja um identificador válido."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def contagem-2 (->> (range 1 1e10)"]},{"tag":"br","content":null},{"tag":"code-text","content":["                     (map #(* % 33))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                     (filter #(= 0 (mod % 17)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                     count-ainda-melhor))"]},{"tag":"br","content":null},{"tag":"code-text","content":["contagem-2"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 588235294"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["time"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Chegamos ao mesmo resultado com um código bem menos e mais simples de entender. Agora vamos ver se ficou mais rápido mesmo. Para isso vamos usar a macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["time"]}]},{"tag":"text","content":[" para exibir o tempo decorrido no processamento."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(time (->> (range 1 1e10)"]},{"tag":"br","content":null},{"tag":"code-text","content":["         (map #(* % 33))"]},{"tag":"br","content":null},{"tag":"code-text","content":["         (filter #(= 0 (mod % 17)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["         count-melhor))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \"Elapsed time: 936001.099613 msecs\""]},{"tag":"br","content":null},{"tag":"code-text","content":["(time (->> (range 1 1e10)"]},{"tag":"br","content":null},{"tag":"code-text","content":["         (map #(* % 33))"]},{"tag":"br","content":null},{"tag":"code-text","content":["         (filter #(= 0 (mod % 17)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["         count-melhor-ainda))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \"Elapsed time: 877925.917591 msecs\""]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Na forma recursiva o processo levou "]},{"tag":"italic","content":[{"tag":"text","content":["15"]}]},{"tag":"text","content":[" minutos e meio para retornar um valor, enquanto na forma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":[", com a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["count-melhor-ainda"]}]},{"tag":"text","content":[" esperamos "]},{"tag":"italic","content":[{"tag":"text","content":["14"]}]},{"tag":"text","content":[" minutos e meio. Tivemos quase um minuto de diferença entre as duas implementações."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Laziness no mundo real"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Até agora vimos que é muito legal fazer cálculos gigantescos que não levam a nada prático usando "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequences"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["streams"]}]},{"tag":"text","content":[" e também como não ficar com a cabeça presa num processamento."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Mas como é que podemos aplicar isso num problema de verdade?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos pegar um problema realmente grande para estudarmos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A "]},{"tag":"italic","content":[{"tag":"text","content":["Wikipedia"]}]},{"tag":"text","content":[" é a maior enciclopedia online e gratuito disponível atualmente com mais de quatro milhões e meio de artigos na sua versão em língua inglesa, que é a mais extensa. "]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A "]},{"tag":"italic","content":[{"tag":"text","content":["Wikimedia Foundation"]}]},{"tag":"text","content":[", empresa responsável pela estrutura por trás da "]},{"tag":"italic","content":[{"tag":"text","content":["Wikipedia"]}]},{"tag":"text","content":[" disponibiliza arquivos compactados contendo todo o conteúdo da enciclopédia, para que seja possível fazer pesquisas específicas sem sobrecarregar os servidores."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O arquivo contendo todos os artigos em inglês ocupa "]},{"tag":"italic","content":[{"tag":"text","content":["10 GB"]}]},{"tag":"text","content":[" quando compactado, e mais de "]},{"tag":"italic","content":[{"tag":"text","content":["44 GB"]}]},{"tag":"text","content":[" quando descompactado. A menos que você tenha um computador com uma quantidade absurda de memória disponível, é improvável que você queira carregar todos esses dados em memória de uma vez só para efetuar qualquer tipo de processamento."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar um projeto para contarmos quantos artigos temos no arquivo mais atualizado. Só que vamos adicionar um nível de dificuldade ao dizer que você não pode descompactar o arquivo para processá-lo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Primeiro, faça o download da Wikipedia em inglês, compactada."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["http://goo.gl/cWDmRV"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como o arquivo tem 10GB, dependendo da velocidade da sua conexão com a Internet, isso pode demorar um pouco. Aqui em casa isso costuma demorar uma noite inteira."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Enquanto isso, vamos criar um novo projeto usando o "]},{"tag":"italic","content":[{"tag":"text","content":["Leiningen"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Na linha de comando do seu sistema operacional, digite o comando"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["lein new wiki"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Dentro do diretório "]},{"tag":"monospaced","content":[{"tag":"text","content":["wiki"]}]},{"tag":"text","content":[", edite o arquivo "]},{"tag":"monospaced","content":[{"tag":"text","content":["project.clj"]}]},{"tag":"text","content":[" e adicione as dependencias que estão listadas abaixo. Não se esqueça de adicionar a configuração "]},{"tag":"monospaced","content":[{"tag":"text","content":[":main"]}]},{"tag":"text","content":[" para apontar para o "]},{"tag":"italic","content":[{"tag":"text","content":["namespace"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["wiki.core"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"code-text","content":[" "]},{"tag":"br","content":null},{"tag":"code-text","content":["(defproject wiki \"0.1.0-SNAPSHOT\""]},{"tag":"br","content":null},{"tag":"code-text","content":["  :dependencies [[org.clojure/clojure \"1.7.0\"] ; a versão pode variar"]},{"tag":"br","content":null},{"tag":"code-text","content":["                 [org.apache.commons/commons-compress \"1.8.1\"]"]},{"tag":"br","content":null},{"tag":"code-text","content":["                 [org.clojure/data.xml \"0.0.8\"]]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  :main wiki.core)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Dentro do diretorio "]},{"tag":"monospaced","content":[{"tag":"text","content":["src"]}]},{"tag":"text","content":[", vamos editar o arquivo "]},{"tag":"monospaced","content":[{"tag":"text","content":["core.clj"]}]},{"tag":"text","content":[", que é onde ficará o nosso código fonte."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["clojure.java.io"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["clojure.java.xml"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos precisar das funções dos "]},{"tag":"italic","content":[{"tag":"text","content":["namespace"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["clojure.java.io"]}]},{"tag":"text","content":[", que empacota os objetos de "]},{"tag":"monospaced","content":[{"tag":"text","content":["java.io"]}]},{"tag":"text","content":[" de uma forma que fique mais fácil usá-los dentro do Clojure, e também do "]},{"tag":"italic","content":[{"tag":"text","content":["namespace"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["clojure.data.xml"]}]},{"tag":"text","content":[", para podermos usar os recursos da biblioteca "]},{"tag":"monospaced","content":[{"tag":"text","content":["clojure/data.xml"]}]},{"tag":"text","content":[", que nos permite ler e manipular arquivos "]},{"tag":"italic","content":[{"tag":"text","content":["XML"]}]},{"tag":"text","content":[" dentro do Clojure de forma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["BZip2CompressorInputStream"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["De dentro da biblioteca "]},{"tag":"monospaced","content":[{"tag":"text","content":["commons-compress"]}]},{"tag":"text","content":[" vamos precisar usar o objeto "]},{"tag":"monospaced","content":[{"tag":"text","content":["BZip2CompressorInputStream"]}]},{"tag":"text","content":[", que nos oferece recursos para manipular arquivos compactados no formato "]},{"tag":"italic","content":[{"tag":"text","content":["BZip2"]}]},{"tag":"text","content":[" também de forma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como podemos trabalhar de forma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":[" se "]},{"tag":"monospaced","content":[{"tag":"text","content":["commons-compress"]}]},{"tag":"text","content":[" é uma biblioteca Java, sem qualquer código Clojure?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como já foi dito nesse capítulo, um "]},{"tag":"italic","content":[{"tag":"text","content":["stream"]}]},{"tag":"text","content":[" funciona exatamente como uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" que é lida do começo para o fim, sem se preocupar com o que já foi processado."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Então podemos trabalhar com "]},{"tag":"monospaced","content":[{"tag":"text","content":["InputStream"]}]},{"tag":"text","content":[" do Java de forma transparente. E, como o próprio nome da classe diz, "]},{"tag":"monospaced","content":[{"tag":"text","content":["BZip2CompressorInputStream"]}]},{"tag":"text","content":[" é uma implementação de "]},{"tag":"monospaced","content":[{"tag":"text","content":["InputStream"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos à nossa declaração de "]},{"tag":"italic","content":[{"tag":"text","content":["namespace"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(ns wiki.core"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (:require [clojure.java.io :as io]"]},{"tag":"br","content":null},{"tag":"code-text","content":["            [clojure.data.xml :as xml]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (:import  [org.apache.commons.compress.compressors.bzip2 "]},{"tag":"br","content":null},{"tag":"code-text","content":["             BZip2CompressorInputStream]))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A nossa aplicação vai receber o nome do arquivo pela linha de comando e passar para uma função que retorna uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" contendo cada página como se fosse um item."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Por "]},{"tag":"italic","content":[{"tag":"text","content":["página"]}]},{"tag":"text","content":[" a Wikipedia entende não só os tópicos de enciclopédia, mas também páginas de usuários, discussões, categorias e qualquer outra informação que tenha um endereço específico."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar uma função chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["xml-reader"]}]},{"tag":"text","content":[" que receba esse nome de arquivo e devolva a "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn xml-reader [filename]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (-> filename "]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Primeiro vamos abrir o arquivo e, em seguida, criar um "]},{"tag":"monospaced","content":[{"tag":"text","content":["InputStream"]}]},{"tag":"text","content":[" para podemos lê-lo."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["      io/file "]},{"tag":"br","content":null},{"tag":"code-text","content":["      io/input-stream "]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos passar o "]},{"tag":"monospaced","content":[{"tag":"text","content":["InputStream"]}]},{"tag":"text","content":[" que criamos como parâmetro para a criação de um objeto "]},{"tag":"monospaced","content":[{"tag":"text","content":["BZip2CompressorInputStream"]}]},{"tag":"text","content":[", que é quem vai ler o arquivo compactado e nos retornar o conteúdo em formato texto. Como podemos ter mais de um arquivo "]},{"tag":"italic","content":[{"tag":"text","content":["XML"]}]},{"tag":"text","content":[" dentro do arquivo compactado, vamos passar também a opção "]},{"tag":"monospaced","content":[{"tag":"text","content":["true"]}]},{"tag":"text","content":[" para o "]},{"tag":"italic","content":[{"tag":"text","content":["constructor"]}]},{"tag":"text","content":[" do objeto."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["      (BZip2CompressorInputStream. true)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos usar o "]},{"tag":"italic","content":[{"tag":"text","content":["stream"]}]},{"tag":"text","content":[" que criamos para gerar um objeto "]},{"tag":"monospaced","content":[{"tag":"text","content":["Reader"]}]},{"tag":"text","content":[", que é o formato esperado pela função "]},{"tag":"monospaced","content":[{"tag":"text","content":["parse"]}]},{"tag":"text","content":[" da biblioteca "]},{"tag":"monospaced","content":[{"tag":"text","content":["clojure/data.xml"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["      io/reader"]},{"tag":"br","content":null},{"tag":"code-text","content":["      xml/parse"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A função "]},{"tag":"monospaced","content":[{"tag":"text","content":["parse"]}]},{"tag":"text","content":[" nos retorna um "]},{"tag":"italic","content":[{"tag":"text","content":["hashmap"]}]},{"tag":"text","content":[" contendo o conteúdo do arquivo. A parte que nos interessa fica dentro da chave "]},{"tag":"monospaced","content":[{"tag":"text","content":[":content"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["      :content))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Pronto, temos a nossa função que abre um arquivo compactado muito grande e nos devolve uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" com uma página por item."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora precisamos filtrar as páginas e extrair somente os artigos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A estrutura de uma página é, de forma simplificada, a que temos a seguir."]},{"tag":"br","content":null}]},{"tag":"code","content":[{"tag":"text","content":["xml"]},{"tag":"br","content":null},{"tag":"code-text","content":["<page>"]},{"tag":"br","content":null},{"tag":"code-text","content":["  <title>Clojure</title>"]},{"tag":"br","content":null},{"tag":"code-text","content":["  <ns>0</ns>"]},{"tag":"br","content":null},{"tag":"code-text","content":["  <id>12345</id>"]},{"tag":"br","content":null},{"tag":"code-text","content":["  <revision>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    <id>445283</id>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    <parentid>445256</parentid>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    <timestamp>2014-03-31T12:33:49Z</timestamp>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    <contributor>"]},{"tag":"br","content":null},{"tag":"code-text","content":["      <username>Clojurian</username>"]},{"tag":"br","content":null},{"tag":"code-text","content":["      <id>9016</id>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    </contributor>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    <text>O texto da página</text>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    <sha1>aep0xqjml9aphc1nq9fk69vodyg9wjr</sha1>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    <model>wikitext</model>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    <format>text/x-wiki</format>"]},{"tag":"br","content":null},{"tag":"code-text","content":["  </revision>"]},{"tag":"br","content":null},{"tag":"code-text","content":["</page>"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Toda página tem uma "]},{"tag":"italic","content":[{"tag":"text","content":["tag"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["ns"]}]},{"tag":"text","content":[", cujo valor é sempre "]},{"tag":"italic","content":[{"tag":"text","content":["0"]}]},{"tag":"text","content":[" quando estamos olhando um artigo. Existem vários outros valores para cada um dos tipos de página, mas para o exemplo só nos interessam os artigos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Nosso filtro vai extrair o conteúdo da "]},{"tag":"italic","content":[{"tag":"text","content":["tag"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["ns"]}]},{"tag":"text","content":[" e verificar se é "]},{"tag":"italic","content":[{"tag":"text","content":["0"]}]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos chamar nosso filtro de "]},{"tag":"monospaced","content":[{"tag":"text","content":["article?"]}]},{"tag":"text","content":[", já que é um predicado que retorna "]},{"tag":"monospaced","content":[{"tag":"text","content":["true"]}]},{"tag":"text","content":[" caso estejamos analisando um artigo."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["clojure.data.xml/parse"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ao ler o "]},{"tag":"italic","content":[{"tag":"text","content":["XML"]}]},{"tag":"text","content":[", a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["parse"]}]},{"tag":"text","content":[" nos retorna um "]},{"tag":"italic","content":[{"tag":"text","content":["hashmap"]}]},{"tag":"text","content":[" contendo o nome da "]},{"tag":"italic","content":[{"tag":"text","content":["tag"]}]},{"tag":"text","content":[" que está sendo lida e seu respectivo conteúdo. Dentro do conteúdo você encontra a "]},{"tag":"italic","content":[{"tag":"text","content":["tag"]}]},{"tag":"text","content":[" que estiver aninhada com seu respectivo conteúdo, e assim por diante."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["De maneira simplificada, teremos um "]},{"tag":"italic","content":[{"tag":"text","content":["hashmap"]}]},{"tag":"text","content":[" parecido com esse ao ler a nossa página de exemplo."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["{:tag :page,"]},{"tag":"br","content":null},{"tag":"code-text","content":[" :attrs {},"]},{"tag":"br","content":null},{"tag":"code-text","content":[" :content {:tag :ns, "]},{"tag":"br","content":null},{"tag":"code-text","content":["           :attrs {},"]},{"tag":"br","content":null},{"tag":"code-text","content":["           :content \"0\"}}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar a função e separar os valores da "]},{"tag":"italic","content":[{"tag":"text","content":["tag"]}]},{"tag":"text","content":[" e do conteúdo. Com esses dois valores, vamos extrair o valor de "]},{"tag":"monospaced","content":[{"tag":"text","content":["ns"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn article? [item]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (let [tag     (:tag item)"]},{"tag":"br","content":null},{"tag":"code-text","content":["        content (:content item)"]},{"tag":"br","content":null},{"tag":"code-text","content":["        nspace  (->> content"]},{"tag":"br","content":null},{"tag":"code-text","content":["                     (filter #(= (:tag %) :ns))"]},{"tag":"br","content":null},{"tag":"code-text","content":["                     first"]},{"tag":"br","content":null},{"tag":"code-text","content":["                     :content"]},{"tag":"br","content":null},{"tag":"code-text","content":["                     first)]"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Finalmente, vamos verificar se estamos lendo uma página, quando a "]},{"tag":"italic","content":[{"tag":"text","content":["tag"]}]},{"tag":"text","content":[" for igual a "]},{"tag":"monospaced","content":[{"tag":"text","content":[":page"]}]},{"tag":"text","content":[", e se seu respectivo valor de "]},{"tag":"monospaced","content":[{"tag":"text","content":["ns"]}]},{"tag":"text","content":[" é igual a "]},{"tag":"italic","content":[{"tag":"text","content":["0"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["    (and (= tag :page)"]},{"tag":"br","content":null},{"tag":"code-text","content":["         (= nspace \"0\"))))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos à ultima parte, onde escrevemos a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["-main"]}]},{"tag":"text","content":[" e passamos o nome do arquivo passado por parâmetro para o nosso processamento."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn -main [& args]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (let [file     (first args)"]},{"tag":"br","content":null},{"tag":"code-text","content":["        xml-seq  (->> file"]},{"tag":"br","content":null},{"tag":"code-text","content":["                      xml-reader"]},{"tag":"br","content":null},{"tag":"code-text","content":["                      (filter article?))]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (println (count xml-seq))))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["lein run enwiki-latest-pages-articles-multistream.xml.bz2"]},{"tag":"br","content":null},{"tag":"code-text","content":["> 10891925"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Mas por que recebemos um valor tão grande se a Wikipedia tem \"apenas\" quatro milhões e meio de artigos? Porque na nossa conta estão incluídos os redirecionamentos, que são artigos que existem apenas para direcionar o leitor para o artigo principal."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como desafio, estude o código e altere-o para que não sejam considerados os redirecionamentos."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Forçando a execução da sequencia"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Existem situações em que é necessário forçar a execução da sequencia. No nosso exemplo, em que processamos o arquivo da "]},{"tag":"italic","content":[{"tag":"text","content":["Wikipedia"]}]},{"tag":"text","content":[", isso aconteceu ao utilizarmos "]},{"tag":"monospaced","content":[{"tag":"text","content":["count"]}]},{"tag":"text","content":[", que vai contar cada um dos itens da sequencia para retornar seu tamanho. "]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Outra situação comum é quando testamos um código no "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[" e obtemos o resultado, mas ao executar a aplicaçao, nada acontece."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Isso acontece porque durante a execução do "]},{"tag":"italic","content":[{"tag":"text","content":["P"]}]},{"tag":"text","content":[" do "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[", que é a parte onde são exibidos os resultados na tela, a "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" é completamente avaliada antes da exibição. Caso você use "]},{"tag":"monospaced","content":[{"tag":"text","content":["println"]}]},{"tag":"text","content":[" ou qualquer outra função do Clojure que exiba dados na tela, a sequencia será executada do começo ao fim."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para exemplificar, criei um projeto bem simples chamado "]},{"tag":"monospaced","content":[{"tag":"text","content":["lazyfail"]}]},{"tag":"text","content":[", que pode ser encontrado no repositório do livro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Além do arquivo de configuração, teremos apenas um "]},{"tag":"italic","content":[{"tag":"text","content":["namespace"]}]},{"tag":"text","content":[" contendo duas funções."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A primeira chama-se "]},{"tag":"monospaced","content":[{"tag":"text","content":["crunch-data"]}]},{"tag":"text","content":[", e serve apenas para simularmos um processamento qualquer que demore para terminar. Vamos fazer o processamento esperar dez milissegundos e retornar o quadrado do valor que foi passado como parâmetro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos também mandar imprimir pontos apenas para sinalizar quando a função está sendo executada."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn crunch-data [value]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (Thread/sleep 10)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (print \".\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (* value value))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Temos também a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["-main"]}]},{"tag":"text","content":[", que é o ponto inicial da nossa aplicação."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Nela vamos executar "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[", que já sabemos que retorna uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[", processando números de "]},{"tag":"italic","content":[{"tag":"text","content":["0"]}]},{"tag":"text","content":[" a "]},{"tag":"italic","content":[{"tag":"text","content":["999"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn -main [& args]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (map crunch-data (range 1000)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos entrar no "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[", digitando "]},{"tag":"monospaced","content":[{"tag":"text","content":["lein repl"]}]},{"tag":"text","content":[" no terminal, dentro do diretório "]},{"tag":"monospaced","content":[{"tag":"text","content":["lazyfail"]}]},{"tag":"text","content":[", e executar a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["-main"]}]},{"tag":"text","content":[" para ver nossa aplicação ser executada."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que o "]},{"tag":"italic","content":[{"tag":"text","content":["namespace"]}]},{"tag":"text","content":[" dessa vez será "]},{"tag":"monospaced","content":[{"tag":"text","content":["lazyfail.core"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(-main)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (0 1 4 9 16 25 36 49 64 81 100 121 144 ... 998001)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; e mais um monte de pontos"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos sair do "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[" e executar o comando "]},{"tag":"monospaced","content":[{"tag":"text","content":["lein run"]}]},{"tag":"text","content":[", para que a aplicação seja executada."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O sinal de "]},{"tag":"monospaced","content":[{"tag":"text","content":["$"]}]},{"tag":"text","content":[" aqui apenas indica que estamos no terminal e não deve ser digitado."]},{"tag":"br","content":null}]},{"tag":"code","content":[{"tag":"br","content":null},{"tag":"code-text","content":["$ lein run"]},{"tag":"br","content":null},{"tag":"code-text","content":["$"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Nada aconteceu, nenhum pontinho apareceu, justamente porque na execução da aplicação ninguém forçou a execução da "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" retornada por "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A situação fica ainda pior se adicionarmos um "]},{"tag":"monospaced","content":[{"tag":"text","content":["print"]}]},{"tag":"text","content":[", no final da função "]},{"tag":"monospaced","content":[{"tag":"text","content":["-main"]}]},{"tag":"text","content":[", nos informando que o processamento acabou."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos alterar a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["-main"]}]},{"tag":"text","content":[":"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn -main [& args]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (map crunch-data (range 1000))"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Acabou\"))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos entrar no "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[" novamente e executar a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["-main"]}]},{"tag":"text","content":[":"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(-main)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Acabou"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Acabou? Acabou nada. Onde estão os pontinhos na tela? Se você executar a aplicação pelo terminal vai receber o mesmo resultado. Pelo menos agora não faz o que esperávamos igualmente nos dois casos."]},{"tag":"br","content":null}]},{"tag":"code","content":[{"tag":"br","content":null},{"tag":"code-text","content":["$ lein run"]},{"tag":"br","content":null},{"tag":"code-text","content":[" Acabou"]},{"tag":"br","content":null},{"tag":"code-text","content":["$"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Relembrando, isso acontece porque "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" retornou uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" que ninguém quis usar. Se ninguém usou, ela ficou quietinha até o final da aplicação, sem calcular um item que seja."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["doall"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para forçar a execução da sequencia, sem apelar para um "]},{"tag":"monospaced","content":[{"tag":"text","content":["print"]}]},{"tag":"text","content":[" e sujar a tela, vamos usar a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["doall"]}]},{"tag":"text","content":[", que obriga que a sequencia seja avaliada até o final e só então a retorna como resultado."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos editar "]},{"tag":"monospaced","content":[{"tag":"text","content":["-main"]}]},{"tag":"text","content":[" novamente."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn -main [& args]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (doall"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (map crunch-data (range 1000)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Acabou\"))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Executando nosso código pelo "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[", temos:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(-main)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; ......... (e mais um monte de pontinhos) ....Acabou"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ótimo, nossa função mastigou os mil números. E executando a aplicação, tivemos o mesmo resultado?"]},{"tag":"br","content":null}]},{"tag":"code","content":[{"tag":"br","content":null},{"tag":"code-text","content":["$ lein run"]},{"tag":"br","content":null},{"tag":"code-text","content":["; ......... (e mais um monte de pontinhos) ....Acabou"]},{"tag":"br","content":null},{"tag":"code-text","content":["$"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora sim. A aplicação faz o que esperávamos dela."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Existe uma forma melhor, e mais idiomática, de forçarmos o processamento de uma lista, especialmente quando são esperados efeitos colaterais e não nos importa a lista que é retornada."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["doseq"]}]},{"tag":"index","content":[{"tag":"text","content":["for"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para isso podemos usar "]},{"tag":"monospaced","content":[{"tag":"text","content":["doseq"]}]},{"tag":"text","content":[", que funciona de forma parecida como o "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[" do Java. Já existe um outro operador chamado "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[" em Clojure, que vamos mostrar mais adiante, e não faz o que estamos querendo agora."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com "]},{"tag":"monospaced","content":[{"tag":"text","content":["doseq"]}]},{"tag":"text","content":[" o nosso código ficaria assim:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn -main [& args]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (doseq [num (range 1000)]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (crunch-data num))"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Acabou\"))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Cada item da sequencia gerada por "]},{"tag":"monospaced","content":[{"tag":"text","content":["range"]}]},{"tag":"text","content":[" é atribuido a "]},{"tag":"monospaced","content":[{"tag":"text","content":["num"]}]},{"tag":"text","content":[", que é usado como um "]},{"tag":"italic","content":[{"tag":"text","content":["local binding"]}]},{"tag":"text","content":[", como se fosse um "]},{"tag":"monospaced","content":[{"tag":"text","content":["let"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ao executarmos nossa aplicação temos o resultado esperado, sem medo de deixar uma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" dormindo no meio do caminho."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["$ lein run"]},{"tag":"br","content":null},{"tag":"code-text","content":["; ......... (e mais um monte de pontinhos) ....Acabou"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Você deve usar "]},{"tag":"monospaced","content":[{"tag":"text","content":["doseq"]}]},{"tag":"text","content":[", e não "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[", sempre que estiver lendo dados de um arquivo, da rede ou de qualquer fonte externa à sua aplicação, de forma "]},{"tag":"italic","content":[{"tag":"text","content":["lazy"]}]},{"tag":"text","content":[". Assim como a impressão de qualquer coisa na tela, essas também são formas de efeito colateral."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["List comprehensions"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Mas eu comentei também sobre o Clojure ter "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[", que não funciona como o "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[" do Java."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No Clojure, o "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[" é usado para trabalharmos com "]},{"tag":"italic","content":[{"tag":"text","content":["list comprehension"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["O problema com as traduções"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Eu realmente não consegui encontrar uma tradução aceitável para "]},{"tag":"italic","content":[{"tag":"text","content":["list comprehension"]}]},{"tag":"text","content":[", já que "]},{"tag":"italic","content":[{"tag":"text","content":["compreensão de listas"]}]},{"tag":"text","content":[" não faz o menor sentido."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O mesmo aconteceu com "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequences"]}]},{"tag":"text","content":[", onde dizer "]},{"tag":"italic","content":[{"tag":"text","content":["sequências preguiçosas"]}]},{"tag":"text","content":[" não ajudaria muito."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos deixar o termo em Inglês mesmo, até para facilitar as suas pesquisas quando você precisar, já que esses são os termos amplamente aceitos pela comunidade."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para quem vem do Python, esse assunto já é mais do que conhecido. Os demais desenvolvedores ficam sabendo agora que "]},{"tag":"italic","content":[{"tag":"text","content":["list comprehension"]}]},{"tag":"text","content":[" é uma forma de gerar sequencias a partir de outras sequencias usando uma sintaxe própria."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Mas gerar sequencias a partir de outras sequencias não é exatamente o que "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[", "]},{"tag":"monospaced","content":[{"tag":"text","content":["filter"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["reduce"]}]},{"tag":"text","content":[" já fazem?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Exatamente, mas com "]},{"tag":"italic","content":[{"tag":"text","content":["list comprehension"]}]},{"tag":"text","content":[" você pode chegar ao mesmo resultado usando um código mais expressivo e conciso."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Na prática, tudo o que você consegue fazer com "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[" é possível de ser feito usando o nosso trio de funções. Cabe a você decidir quando o código fica mais legível de uma forma ou de outra."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A forma mais simples de usar "]},{"tag":"italic","content":[{"tag":"text","content":["list comprehension"]}]},{"tag":"text","content":[" nós já conhecemos. A função "]},{"tag":"monospaced","content":[{"tag":"text","content":["doseq"]}]},{"tag":"text","content":[" funciona de forma bem parecida com o "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[" nesse ponto."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos gerar uma lista de números de "]},{"tag":"italic","content":[{"tag":"text","content":["1"]}]},{"tag":"text","content":[" a "]},{"tag":"italic","content":[{"tag":"text","content":["10"]}]},{"tag":"text","content":[" e retornar uma nova lista com o dobro de cada item."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" basta fazer:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(map #(* % 2) "]},{"tag":"br","content":null},{"tag":"code-text","content":["     (range 1 11))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (2 4 6 8 10 12 14 16 18 20)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[" ficaria:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(for [x (range 1 11)]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (* x 2))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (2 4 6 8 10 12 14 16 18 20)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Não há mistério algum aqui. Internamente a macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[" faz uso pesado de "]},{"tag":"monospaced","content":[{"tag":"text","content":["if"]}]},{"tag":"text","content":[", "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[", "]},{"tag":"monospaced","content":[{"tag":"text","content":["reduce"]}]},{"tag":"text","content":[" para que o nosso código fique limpinho e cheiroso."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Podemos usar filtros também, através da opção "]},{"tag":"monospaced","content":[{"tag":"text","content":[":when"]}]},{"tag":"text","content":[". Vamos pegar nosso exemplo anterior e exibir apenas os múltiplos de cinco."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(for [x (range 1 11)"]},{"tag":"br","content":null},{"tag":"code-text","content":["      :when (= 0 (mod x 5))]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (* x 2))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (10 20)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Que poderíamos escrever da forma clássica com "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["filter"]}]},{"tag":"text","content":[":"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(filter #(= 0 (mod % 5))"]},{"tag":"br","content":null},{"tag":"code-text","content":["        (map #(* % 2) "]},{"tag":"br","content":null},{"tag":"code-text","content":["             (range 1 11)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (10 20)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Apesar do resultado ter sido o mesmo, podemos notar que no "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[" estamos multiplicando depois de filtrar, e no código com "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" estamos multiplicando primeiro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Sem problemas. Vamos usar a opção "]},{"tag":"monospaced","content":[{"tag":"text","content":[":let"]}]},{"tag":"text","content":[" para criar um "]},{"tag":"italic","content":[{"tag":"text","content":["local binding"]}]},{"tag":"text","content":[" dentro da nossa "]},{"tag":"italic","content":[{"tag":"text","content":["list comprehension"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(for [x (range 1 11)"]},{"tag":"br","content":null},{"tag":"code-text","content":["      :let [y (* x 2)]"]},{"tag":"br","content":null},{"tag":"code-text","content":["      :when (= 0 (mod y 5))]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  y)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (10 20)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Podemos também escrever nosso código de forma diferente, usando a opção "]},{"tag":"monospaced","content":[{"tag":"text","content":[":while"]}]},{"tag":"text","content":[", que informa quando a sequencia deve parar de gerar itens. Note que agora a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["range"]}]},{"tag":"text","content":[" vai nos retornar uma sequencia infinita:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(for [x (range)"]},{"tag":"br","content":null},{"tag":"code-text","content":["      :while (<= x 10)"]},{"tag":"br","content":null},{"tag":"code-text","content":["      :let [y (* x 2)]"]},{"tag":"br","content":null},{"tag":"code-text","content":["      :when (= 0 (mod y 5))]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  y)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (0 10 20)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Uma boa prática é a de utilizar "]},{"tag":"monospaced","content":[{"tag":"text","content":[":while"]}]},{"tag":"text","content":[" ao invés de "]},{"tag":"monospaced","content":[{"tag":"text","content":[":when"]}]},{"tag":"text","content":[" quando quisermos estabelecer uma condição de parada para a geração de sequencias."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["dorun"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos usar a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["dorun"]}]},{"tag":"text","content":[" para forçar a execução da "]},{"tag":"italic","content":[{"tag":"text","content":["lazy sequence"]}]},{"tag":"text","content":[" retornada por "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A diferença entre "]},{"tag":"monospaced","content":[{"tag":"text","content":["doall"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["dorun"]}]},{"tag":"text","content":[" é que "]},{"tag":"monospaced","content":[{"tag":"text","content":["doall"]}]},{"tag":"text","content":[" retorna a sequencia completamente avaliada, enquanto "]},{"tag":"monospaced","content":[{"tag":"text","content":["dorun"]}]},{"tag":"text","content":[" retorna "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(time"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (dorun"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (for [x (range 1000) y (range 10000) :when (> x y)] [x y])))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \"Elapsed time: 532.527616 msecs\""]},{"tag":"br","content":null},{"tag":"code-text","content":["(time"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (dorun"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (for [x (range 1000) y (range 10000) :while (> x y)] [x y])))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \"Elapsed time: 65.411137 msecs\""]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Perceba que em ambos os casos estamos lidando com sequencias do mesmo tamanho."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(count (for [x (range 1000) y (range 10000) :when (> x y)] [x y]))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 499500"]},{"tag":"br","content":null},{"tag":"code-text","content":["(count (for [x (range 1000) y (range 10000) :while (> x y)] [x y]))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 499500"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como exercício, reescreva o código a seguir usando "]},{"tag":"monospaced","content":[{"tag":"text","content":["map"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["filter"]}]},{"tag":"text","content":[". As quebras de linhas foram adicionadas por minha conta para facilitar a visualização do resultado."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(for [x (range 1 11) "]},{"tag":"br","content":null},{"tag":"code-text","content":["      y (range 1 11) "]},{"tag":"br","content":null},{"tag":"code-text","content":["      :while (< y x)] "]},{"tag":"br","content":null},{"tag":"code-text","content":["  [x y])"]},{"tag":"br","content":null},{"tag":"code-text","content":[";([2 1]"]},{"tag":"br","content":null},{"tag":"code-text","content":["; [3 1]  [3 2]"]},{"tag":"br","content":null},{"tag":"code-text","content":["; [4 1]  [4 2]  [4 3]"]},{"tag":"br","content":null},{"tag":"code-text","content":["; [5 1]  [5 2]  [5 3]  [5 4]"]},{"tag":"br","content":null},{"tag":"code-text","content":["; [6 1]  [6 2]  [6 3]  [6 4]  [6 5]"]},{"tag":"br","content":null},{"tag":"code-text","content":["; [7 1]  [7 2]  [7 3]  [7 4]  [7 5]  [7 6]"]},{"tag":"br","content":null},{"tag":"code-text","content":["; [8 1]  [8 2]  [8 3]  [8 4]  [8 5]  [8 6]  [8 7] "]},{"tag":"br","content":null},{"tag":"code-text","content":["; [9 1]  [9 2]  [9 3]  [9 4]  [9 5]  [9 6]  [9 7]  [9 8]"]},{"tag":"br","content":null},{"tag":"code-text","content":[";[10 1] [10 2] [10 3] [10 4] [10 5] [10 6] [10 7] [10 8] [10 9])"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Brinque bastante com "]},{"tag":"italic","content":[{"tag":"text","content":["list comprehension"]}]},{"tag":"text","content":[", note as diferenças de "]},{"tag":"italic","content":[{"tag":"text","content":["performance"]}]},{"tag":"text","content":[" e no resultado conforme você troca os parâmetros de posição e compare com o código equivalente usando apenas funções. Com o tempo vai ficar bem claro onde fica melhor usar uma forma e onde é melhor usar outra."]}]}]}