{"tag":"document","content":[{"tag":"chapter","content":[{"tag":"text","content":[" Estendendo a linguagem com macros"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"label","content":[{"tag":"text","content":["capitulo-macros"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["macros"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"quote","content":[{"tag":"text","content":["\"As fronteiras de minha linguagem são as fronteiras de meu mundo\""]},{"tag":"text","content":["  -- Ludwig Wittgenstein, filósofo"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Uma linguagem de argila"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Carlinhos era um programador como qualquer outro. Entrava as oito da manhã, saia as cinco da tarde e estava satisfeito programando em Java, como tantos outros profissionais que conhecemos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Numa sexta-feira, um colega de trabalho o apresentou a uma linguagem chamada "]},{"tag":"italic","content":[{"tag":"text","content":["Ruby"]}]},{"tag":"text","content":[", criada por um japonês, e que estava sendo utilizada por um monte de empresas no mercado. Carlinhos resolveu experimentar."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Após passar o final de semana brincando com a nova linguagem, Carlinhos voltou ao trabalho e se sentiu incomodado. Alguma coisa estava errada com a linguagem que ele conhecia tão bem. Ele não entendia porque precisava escreve tanto para fazer o mesmo que no Ruby podia ser feito com poucas linhas. E pior: de forma menos legível e expressiva."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["De repente Carlinhos começou a sentir falta de uma forma melhor de se expressar através do código. Ele queria ser tão ou mais produtivo que seus colegas que usavam Ruby. Ele queria, inclusive, poder mudar a linguagem conforme suas necessidades, de acordo com o problema a ser resolvido, algo que nem mesmo o Ruby permitia com facilidade. Ele queria muito mais."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Um dia, durante o almoço, ele resolveu dividir com os colegas as coisas que o incomodavam. Dois deles riram, dizendo que Carlinhos estava inventando coisas. Disseram inclusive que o Java era assim mesmo e pessoas criavam coisas bacanas com a linguagem no mundo inteiro sem reclamar."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O terceiro colega que estava na mesa, e até então tinha observado a conversa em silêncio, perguntou:"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"italic","content":[{"tag":"text","content":["\"E seu te disser que isso é possível? Que existe uma linguagem que você pode moldar como se fosse argila, deixando-a ainda mais expressiva e, de quebra, ainda pode continuar usando todas as bibliotecas que você usa hoje no Java?\""]}]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Carlinhos não podia acreditar naquilo. Seus dois colegas conformistas estavam ocupados demais atacando a sobremesa para prestar atenção na conversa."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"italic","content":[{"tag":"text","content":["\"Você deve estar se perguntando qual é a mágica. Não existe mágica. O que existe são macros.\""]}]},{"tag":"text","content":[", continuou o terceiro colega como se tivesse lido os pensamentos de Carlinhos. "]},{"tag":"italic","content":[{"tag":"text","content":["\"Depois do almoço eu te explico o que é e como funciona, mas talvez seja o início de um caminho sem volta para você.\""]}]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Carlinhos mal podia esperar."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Não é mágica. São macros."]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Esse capítulo não é sobre Carlinhos mas, imaginando como foi a conversa, podemos enumerar algumas coisas que poderiam ser melhoradas na linguagem Java caso ela permitisse macros. Pode imaginar, que é bem possível que o Clojure permita que você as adicione."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Por exemplo, a linguagem C# tem um recurso bem interessante chamado "]},{"tag":"monospaced","content":[{"tag":"text","content":["using"]}]},{"tag":"text","content":[", em que um recurso é fechado automaticamente ao final do bloco."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["using (C Sharp)"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"code","content":["java",{"tag":"br","content":null},{"tag":"code-text","content":["using (StreamReader sr = File.OpenText(\"arquivo.txt\"))"]},{"tag":"br","content":null},{"tag":"code-text","content":["{"]},{"tag":"br","content":null},{"tag":"code-text","content":["  Console.WriteLine(sr.ReadLine());"]},{"tag":"br","content":null},{"tag":"code-text","content":["}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No Java você é obrigado a fechar o arquivo ao terminar de ler."]},{"tag":"br","content":null}]},{"tag":"code","content":["java",{"tag":"br","content":null},{"tag":"code-text","content":["DataInputStream bis ="]},{"tag":"br","content":null},{"tag":"code-text","content":["    new DataInputStream("]},{"tag":"br","content":null},{"tag":"code-text","content":["      new FileInputStream("]},{"tag":"br","content":null},{"tag":"code-text","content":["        new File(\"arquivo.txt\")));"]},{"tag":"br","content":null},{"tag":"code-text","content":["System.out.println(bis.readLine());"]},{"tag":"br","content":null},{"tag":"code-text","content":["bis.close();"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O problema é que é bem comum esquecermos de fechar o arquivo, abrindo espaço para erros na aplicação. Outro problema é que teremos que esperar eternamente pela boa vontade dos desenvolvedores da linguagem para que esse recurso seja adicionado, se algum dia chegar a ser adicionado."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Já no Clojure podemos criar nosso próprio "]},{"tag":"monospaced","content":[{"tag":"text","content":["using"]}]},{"tag":"text","content":[" e trabalharmos com um código assim:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def bis (DataInputStream."]},{"tag":"br","content":null},{"tag":"code-text","content":["           (FileInputStream."]},{"tag":"br","content":null},{"tag":"code-text","content":["             (File. \"arquivo.txt\"))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(using bis"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (.readLine bis)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Que tal?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Já no Ruby temos o "]},{"tag":"monospaced","content":[{"tag":"text","content":["each"]}]},{"tag":"text","content":[", que executa um bloco de código em cada item de um vetor."]},{"tag":"br","content":null}]},{"tag":"code","content":["ruby",{"tag":"br","content":null},{"tag":"code-text","content":["lista_itens.each {|item| puts item}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Em Java teríamos que usar o nosso conhecido "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[":"]},{"tag":"br","content":null}]},{"tag":"code","content":["java",{"tag":"br","content":null},{"tag":"code-text","content":["for(Item item : listaItens) {"]},{"tag":"br","content":null},{"tag":"code-text","content":["  System.out.println(item);"]},{"tag":"br","content":null},{"tag":"code-text","content":["}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E fique feliz por essa sintaxe do "]},{"tag":"monospaced","content":[{"tag":"text","content":["for"]}]},{"tag":"text","content":[". Até a versão "]},{"tag":"italic","content":[{"tag":"text","content":["1.4"]}]},{"tag":"text","content":[" do Java você seria obrigado a escrever assim:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["for(int i = 0; i < listaItens.size(); i++) {"]},{"tag":"br","content":null},{"tag":"code-text","content":["  System.out.println(listaItens.get(i));"]},{"tag":"br","content":null},{"tag":"code-text","content":["}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Em Clojure podemos criar nosso próprio "]},{"tag":"monospaced","content":[{"tag":"text","content":["each"]}]},{"tag":"text","content":[":"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(each [item lista-itens]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println item))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Durante o capítulo vamos aprender a criar essas macros e outras mais que possam facilitar nossas vidas."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O próprio Clojure faz uso constante de macros para criar a linguagem. Muito do que você usa da biblioteca padrão foi escrito em Clojure."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Por alto, olhando o código fonte da linguagem, contei uma dúzia de formas especiais, que são operadores que formam o núcleo da linguagem, e mais de setenta macros que ajudam a formar a biblioteca padrão. É uma mostra de como você pode aumentar ou moldar a linguagem da mesma forma que os criadores da linguagem fizeram, sem plugins nem gambiarras."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Legal, mas o que são macros?"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Macros nada mais são do que construções idiomáticas que são "]},{"tag":"italic","content":[{"tag":"text","content":["expandidas"]}]},{"tag":"text","content":[" em tempo de compilação. Durante essa "]},{"tag":"italic","content":[{"tag":"text","content":["expansão"]}]},{"tag":"text","content":[", o código que você escreveu é convertido em um bloco maior de código e, caso não haja mais nenhuma macro nesse bloco, ele finalmente é avaliado e executado."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos ver na prática como isso funciona começando com um código bem simples."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Nós aprendemos no capítulo "]},{"tag":"ref-label","content":[{"tag":"text","content":["capitulo-funcoes"]}]},{"tag":"text","content":[" como repetir a execução de um código usando recursão. Vamos usar aqui o mesmo recurso para imprimir infinitamente um texto na tela."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(loop []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Preso num loop infinito\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (recur))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Qualquer programador que tenha alguma familiaridade com Clojure sabe que a dupla "]},{"tag":"monospaced","content":[{"tag":"text","content":["loop"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["recur"]}]},{"tag":"text","content":[" sem uma condição de parada vai criar um "]},{"tag":"italic","content":[{"tag":"text","content":["loop"]}]},{"tag":"text","content":[" infinito. E quem ainda não tem essa familiaridade? E se tivermos um trecho de código extenso usando esse recurso?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos então criar nossa primeira macro para deixar o código mais legível."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["defmacro"]}]},{"tag":"index","content":[{"tag":"text","content":["~@"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro infinite-loop"]},{"tag":"br","content":null},{"tag":"code-text","content":["  \"Executa o conteúdo de body infinitamente\""]},{"tag":"br","content":null},{"tag":"code-text","content":["  [& body]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(loop []"]},{"tag":"br","content":null},{"tag":"code-text","content":["     ~@body"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (recur)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(infinite-loop"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Preso num loop infinito\"))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ao executar, você estará realmente preso num "]},{"tag":"italic","content":[{"tag":"text","content":["loop"]}]},{"tag":"text","content":[" infinito."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["macroexpand-1"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para sabermos o que o compilador fez antes de executar o código, vamos utilizar o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["macroexpand-1"]}]},{"tag":"text","content":[", que verifica "]},{"tag":"italic","content":[{"tag":"text","content":["uma vez"]}]},{"tag":"text","content":[" quais operadores são macros, expandindo-os."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para utilizar este operador, você precisa passar o código como se fosse uma lista. Para isso, use o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["'"]}]},{"tag":"text","content":[" ou "]},{"tag":"monospaced","content":[{"tag":"text","content":["quote"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(macroexpand-1"]},{"tag":"br","content":null},{"tag":"code-text","content":["  '(infinite-loop"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (println \"Preso num loop infinito\")))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/loop []"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (println \"Preso num loop infinito\")"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (recur))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que a versão expandida é praticamente igual ao nosso código original, escrito com "]},{"tag":"monospaced","content":[{"tag":"text","content":["loop"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["recur"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Olhando para o código da nossa macro, temos várias novidades e um velho conhecido."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["defn"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A declaração de uma macro, feita através do operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["defmacro"]}]},{"tag":"text","content":[", guarda muitas semelhanças com "]},{"tag":"monospaced","content":[{"tag":"text","content":["defn"]}]},{"tag":"text","content":[". Note que também temos um texto que serve como documentação, uma lista de argumentos e um corpo contendo as instruções a serem executadas, assim como na declaração de uma função. Na própria documentação ficamos sabendo se estamos vendo uma função ou uma macro."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["doc"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(doc infinite-loop)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; -------------------------"]},{"tag":"br","content":null},{"tag":"code-text","content":["; user/infinite-loop"]},{"tag":"br","content":null},{"tag":"code-text","content":["; ([& body])"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Macro"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   Executa o conteúdo de body infinitamente"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"index","content":[{"tag":"text","content":["`"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Porém, note que imediatamente antes do corpo da função temos o conhecido operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["`"]}]},{"tag":"text","content":[", ou "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[", que já vimos no capítulo "]},{"tag":"ref-label","content":[{"tag":"text","content":["capitulo-dados"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["quote"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Relembrando, esse operador funciona praticamente da mesma forma que "]},{"tag":"monospaced","content":[{"tag":"text","content":["quote"]}]},{"tag":"text","content":[", tratando uma lista de expressões como uma lista de dados. Porém, "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[" também resolve o nome do operador para seu nome completo, deixando claro em qual "]},{"tag":"italic","content":[{"tag":"text","content":["namespace"]}]},{"tag":"text","content":[" ele foi declarado, ou se estivermos lidando com uma classe Java, em qual pacote está a tal classe."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":[";; quote normal"]},{"tag":"br","content":null},{"tag":"code-text","content":["'(1 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (1 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":[";; syntax-quote"]},{"tag":"br","content":null},{"tag":"code-text","content":["`(1 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (1 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":[";; parecem iguais, mas vamos adicionar um operador qualquer"]},{"tag":"br","content":null},{"tag":"code-text","content":["'(+ 1 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (+ 1 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":[";; e agora com syntax-quote"]},{"tag":"br","content":null},{"tag":"code-text","content":["`(+ 1 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/+ 1 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":[";; ou com Java"]},{"tag":"br","content":null},{"tag":"code-text","content":["`Integer/MAX_VALUE"]},{"tag":"br","content":null},{"tag":"code-text","content":["; java.lang.Integer/MAX_VALUE"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Assim o compilador sabe exatamente qual é o operador, classe ou objeto que deve ser usado."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Então, se funcionam praticamente da mesma forma, eu poderia muito bem usar o "]},{"tag":"italic","content":[{"tag":"text","content":["quote"]}]},{"tag":"text","content":[" normal na minha macro, certo?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Errado. Por "]},{"tag":"italic","content":[{"tag":"text","content":["praticamente igual"]}]},{"tag":"text","content":[" significa que temos uma diferença sutil, mas muito importante. Quando você usa "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[" em uma lista, você também está informando que a lista é um "]},{"tag":"italic","content":[{"tag":"text","content":["template"]}]},{"tag":"text","content":[", um modelo que será completado conforme a macro for expandida."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com isso você avisa ao compilador que está escrevendo código para macros e isso habilita os demais operadores que vamos precisar e que vamos ver mais para frente."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Veja novamente o nosso exemplo. Os trechos com "]},{"tag":"monospaced","content":[{"tag":"text","content":["loop"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["recur"]}]},{"tag":"text","content":[" são os mesmos que estão no código da macro, mas o recheio do código, a expressão que está dentro da repetição muda conforme você utiliza a macro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos usar novamente no nosso "]},{"tag":"italic","content":[{"tag":"text","content":["loop"]}]},{"tag":"text","content":[" infinito para demonstrar, dessa vez adicionando uma pequena pausa entre cada repetição."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(infinite-loop"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (Thread/sleep 2000)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Pausadamente preso num loop infinito\"))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Se olharmos o código por dentro, veja que "]},{"tag":"monospaced","content":[{"tag":"text","content":["~@body"]}]},{"tag":"text","content":[" foi completamente substituido pela sequencia de instruções que aninhamos dentro de "]},{"tag":"monospaced","content":[{"tag":"text","content":["infinite-loop"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(macroexpand-1"]},{"tag":"br","content":null},{"tag":"code-text","content":["  '(infinite-loop"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (Thread/sleep 2000)"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (println \"Pausadamente preso num loop infinito\")))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/loop []"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (Thread/sleep 2000)"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (println \"Pausadamente preso num loop infinito\")"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (recur))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["Quote e syntax-quote"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para deixar claro as diferenças entre "]},{"tag":"italic","content":[{"tag":"text","content":["quote"]}]},{"tag":"text","content":[" e "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[", compare os códigos executados usando um e outro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Código com "]},{"tag":"italic","content":[{"tag":"text","content":["quote"]}]},{"tag":"text","content":[":"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def numero 42)"]},{"tag":"br","content":null},{"tag":"code-text","content":["'x#"]},{"tag":"br","content":null},{"tag":"code-text","content":["; x#"]},{"tag":"br","content":null},{"tag":"code-text","content":["'(+ ~numero ~numero))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (+ (clojure.core/unquote numero)"]},{"tag":"br","content":null},{"tag":"code-text","content":[";    (clojure.core/unquote numero))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Código com "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[":"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def numero 42)"]},{"tag":"br","content":null},{"tag":"code-text","content":["`x#"]},{"tag":"br","content":null},{"tag":"code-text","content":["; x__771__auto__"]},{"tag":"br","content":null},{"tag":"code-text","content":["`(+ ~numero ~numero)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/+ 42 42)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Relembrando que você usa "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[" para escrever macros, e usa "]},{"tag":"italic","content":[{"tag":"text","content":["quote"]}]},{"tag":"text","content":[" normal para transformar o código em uma estrutura de dados e passar como parâmetro para "]},{"tag":"monospaced","content":[{"tag":"text","content":["macroexpand-1"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Usando unquote sem complicação"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos definir localmente dois valores, "]},{"tag":"monospaced","content":[{"tag":"text","content":["a"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["b"]}]},{"tag":"text","content":[", um valendo "]},{"tag":"monospaced","content":[{"tag":"text","content":["6"]}]},{"tag":"text","content":[" e outro valendo "]},{"tag":"monospaced","content":[{"tag":"text","content":["7"]}]},{"tag":"text","content":[". Em seguida vamos utilizar "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[" em uma expressão que multiplica "]},{"tag":"monospaced","content":[{"tag":"text","content":["a"]}]},{"tag":"text","content":[" por "]},{"tag":"monospaced","content":[{"tag":"text","content":["b"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(let [a 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["      b 7]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(* a b))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/* user/a user/b)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ao invés de trabalhar com os valores locais, o "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[" considerou que "]},{"tag":"monospaced","content":[{"tag":"text","content":["a"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["b"]}]},{"tag":"text","content":[" são "]},{"tag":"italic","content":[{"tag":"text","content":["vars"]}]},{"tag":"text","content":[" do "]},{"tag":"italic","content":[{"tag":"text","content":["namespace"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["user"]}]},{"tag":"text","content":[", que é o padrão do "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como não existem os "]},{"tag":"italic","content":[{"tag":"text","content":["vars"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["a"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["b"]}]},{"tag":"text","content":[", esse código vai causar um erro ao ser executado."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["eval"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Existe uma função chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["eval"]}]},{"tag":"text","content":[" que recebe uma estrutura de dados e executa como se fosse código. Vamos testar nosso código para ver o erro acontecendo."]},{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["Eval"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O nome "]},{"tag":"monospaced","content":[{"tag":"text","content":["eval"]}]},{"tag":"text","content":[" vem do inglês "]},{"tag":"italic","content":[{"tag":"text","content":["evaluate"]}]},{"tag":"text","content":[", que significa "]},{"tag":"italic","content":[{"tag":"text","content":["avaliar"]}]},{"tag":"text","content":[". Avaliar é exatamente o o que Clojure faz quando interpreta e executa uma expressão."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Se um dia você resolver escrever uma linguagem, a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["eval"]}]},{"tag":"text","content":[" é um bom ponto para se começar."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(eval"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (let [a 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["        b 7]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    `(* a b)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; CompilerException java.lang.RuntimeException: No such var: user/a"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E por que o erro não ocorre assim que escrevemos o código com o "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":["? Por que o código que está delimitado pelo "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[", e todo o resto do código de uma macro, é avaliado e executado "]},{"tag":"italic","content":[{"tag":"text","content":["em tempo de compilação"]}]},{"tag":"text","content":[", enquanto a atribuição de valores a seus respectivos símbolos ocorre em "]},{"tag":"italic","content":[{"tag":"text","content":["tempo de execução"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para que o valor seja utilizado em tempo de execução, vamos usar o operador "]},{"tag":"italic","content":[{"tag":"text","content":["unquote"]}]},{"tag":"text","content":[", representado pelo operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["~"]}]},{"tag":"text","content":[". Com ele podemos substituir trechos do "]},{"tag":"italic","content":[{"tag":"text","content":["template"]}]},{"tag":"text","content":[" criado pelo "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[" por seus respectivos valores."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Colocando o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["~"]}]},{"tag":"text","content":[" em prática, vemos que o código é expandido com o símbolos substituidos por seus valores, mas só é executado quando passado para "]},{"tag":"monospaced","content":[{"tag":"text","content":["eval"]}]},{"tag":"text","content":[". Nós temos uma expressão como resultado, e sua execução só acontece quando queremos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vou substituir apenas um dos símbolos."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(let [a 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["      b 7]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(* ~a b))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/* 6 user/b)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que "]},{"tag":"monospaced","content":[{"tag":"text","content":["a"]}]},{"tag":"text","content":[" foi substituido pelo valor atribuido em tempo de execução, enquanto "]},{"tag":"monospaced","content":[{"tag":"text","content":["b"]}]},{"tag":"text","content":[" continuou a ser entendido como um "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[" que só vai estar disponível quando necessário."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E se eu utilizar "]},{"tag":"italic","content":[{"tag":"text","content":["unquote"]}]},{"tag":"text","content":[" com um símbolo que não foi declarado? Vimos que sem o "]},{"tag":"italic","content":[{"tag":"text","content":["unquote"]}]},{"tag":"text","content":[" o erro só acontece quando o nosso código é avaliado com "]},{"tag":"monospaced","content":[{"tag":"text","content":["eval"]}]},{"tag":"text","content":[".. E com "]},{"tag":"italic","content":[{"tag":"text","content":["unquote"]}]},{"tag":"text","content":["?"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(let [a 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["      b 7]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(* ~c b)) ; c não existe"]},{"tag":"br","content":null},{"tag":"code-text","content":["; CompilerException java.lang.RuntimeException:"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Unable to resolve symbol: c in this context"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O próprio compilador reclamou que "]},{"tag":"monospaced","content":[{"tag":"text","content":["c"]}]},{"tag":"text","content":[" não existe no contexto da expressão. Se você criar um "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[" chamado "]},{"tag":"monospaced","content":[{"tag":"text","content":["c"]}]},{"tag":"text","content":[", ou declarar um valor para "]},{"tag":"monospaced","content":[{"tag":"text","content":["c"]}]},{"tag":"text","content":[" dentro do "]},{"tag":"monospaced","content":[{"tag":"text","content":["let"]}]},{"tag":"text","content":[" ou mesmo se estiver dentro de uma função que receba "]},{"tag":"monospaced","content":[{"tag":"text","content":["c"]}]},{"tag":"text","content":[" como parâmetro, o erro para de acontecer e o respectivo valor será utilizado."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def c 99)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(let [a 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["      b 7]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(* ~c b)) ; c é um var"]},{"tag":"br","content":null},{"tag":"code-text","content":["(clojure.core/* 99 user/b)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O símbolo "]},{"tag":"monospaced","content":[{"tag":"text","content":["c"]}]},{"tag":"text","content":[" é substituido por seu valor, desde que "]},{"tag":"monospaced","content":[{"tag":"text","content":["c"]}]},{"tag":"text","content":[" exista."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Voltando ao nosso código, vamos substituir "]},{"tag":"monospaced","content":[{"tag":"text","content":["a"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["b"]}]},{"tag":"text","content":[" por seus respectivos valores utilizando "]},{"tag":"italic","content":[{"tag":"text","content":["unquote"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(let [a 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["      b 7]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(* ~a ~b))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/* 6 7)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(eval"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (let [a 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["        b 7]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    `(* ~a ~b)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 42"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar uma macro chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["mult"]}]},{"tag":"text","content":[" que multiplica os dois valores. Dessa vez os valores de "]},{"tag":"monospaced","content":[{"tag":"text","content":["a"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["b"]}]},{"tag":"text","content":[" vêm dos parâmetros."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro mult [a b]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(* ~a ~b))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(mult 6 7)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 42"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Criando nossos próprios operadores"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora que aprendemos a preencher a expressão com os valores, vamos finalmente desenvolver os operadores dos quais falamos no início do capítulo. O primeiro deles é o "]},{"tag":"monospaced","content":[{"tag":"text","content":["unless"]}]},{"tag":"text","content":[", existente no Ruby, que funciona como um "]},{"tag":"monospaced","content":[{"tag":"text","content":["if"]}]},{"tag":"text","content":[" invertido: se a condição for falsa, a primeira expressão é executada, caso contrário é executada a segunda."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["É sempre uma boa prática escrever o código em Clojure que vai fazer o que queremos "]},{"tag":"italic","content":[{"tag":"text","content":["antes"]}]},{"tag":"text","content":[" de escrever a macro. A partir do momento em que tivermos o código funcionando e fazendo o que se espera, vamos usá-lo como modelo para criar a macro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O funcionamento de "]},{"tag":"monospaced","content":[{"tag":"text","content":["unless"]}]},{"tag":"text","content":[" deve ficar assim:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(unless (= 1 0)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Ufa! Um não é igual a zero.\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Que maluquice! Um é igual a zero!\"))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; CompilerException java.lang.RuntimeException:"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Unable to resolve symbol: unless in this context"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Claro que não vai funcionar ainda. Falta escrever o código de "]},{"tag":"monospaced","content":[{"tag":"text","content":["unless"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O código que faz isso, dentro das nossas limitadas ferramentas pode ser o seguinte:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(if (not (= 1 0))"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Ufa! Um não é igual a zero.\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Que maluquice! Um é igual a zero!\"))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Ufa! Um não é igual a zero."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Legal, o código em Clojure padrão funciona. Vamos então dissecar passo a passo o que temos aqui."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No nosso código, "]},{"tag":"monospaced","content":[{"tag":"text","content":["(= 1 0)"]}]},{"tag":"text","content":[" é a condição. Vamos então utilizar a condição como um parâmetro da macro:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro unless [condicao]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(if (not ~condicao)"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (println \"Ufa! Um não é igual a zero.\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (println \"Que maluquice! Um é igual a zero!\")))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos executar nosso código para ver se está funcionando."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(unless (= 1 0)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Ufa! Um não é igual a zero.\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Que maluquice! Um é igual a zero!\"))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; ArityException Wrong number of args (3) passed to: user/unless"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ouch. O apressado come cru e quente. Tanto o código a ser executado caso a condição seja falsa como o código da expressão verdeira são considerados parâmetros para uma macro. Devemos modificar a assinatura da declaração da macro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos então separar as duas expressões com "]},{"tag":"monospaced","content":[{"tag":"text","content":["println"]}]},{"tag":"text","content":[" em dois parâmetros: "]},{"tag":"monospaced","content":[{"tag":"text","content":["verdadeiro"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["falso"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro unless [condicao falso verdadeiro]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(if (not ~condicao)"]},{"tag":"br","content":null},{"tag":"code-text","content":["     ~falso"]},{"tag":"br","content":null},{"tag":"code-text","content":["     ~verdadeiro))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos tentar de novo:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(unless (= 1 0)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Ufa! Um não é igual a zero.\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Que maluquice! Um é igual a zero!\"))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Ufa! Um não é igual a zero."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Se utilizarmos uma condição verdadeira, a segunda expressão deve ser executada."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(unless (= 1 1)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Que maluquice! Um não é igual a um!\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Tudo certo. Um é igual a um.\"))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Tudo certo. Um é igual a um."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Por que uma macro e não uma função?"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Um dos casos em que devemos utilizar macros ao invés de funções é quando não podemos avaliar as expressões antes de decidir qual caminho seguir."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ao utilizarmos uma função, todas as expressões são avaliadas e somente os resultados são passados como parâmetro. Numa macro as expressões são passadas por parâmetro, sem serem avaliadas, e só retornam um valor quando for realmente necessário."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos programar "]},{"tag":"monospaced","content":[{"tag":"text","content":["unless"]}]},{"tag":"text","content":[" como uma função, para a qual vamos chamar de "]},{"tag":"monospaced","content":[{"tag":"text","content":["f-unless"]}]},{"tag":"text","content":[", e vamos fazer uma checagem de acesso num sistema imaginário. Se o usuário tiver permissão, todas as informações do banco de dados serão excluídos. Caso contrário, será exibida uma mensagem de erro."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn f-unless [condicao falso verdadeiro]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (if (not condicao)"]},{"tag":"br","content":null},{"tag":"code-text","content":["    falso"]},{"tag":"br","content":null},{"tag":"code-text","content":["    verdadeiro))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos escrever o nosso código de verificação de acesso. Nada muito sofisticado. Vamos começar com um usuário não autorizado."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def autorizado false)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(f-unless (not autorizado)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Apagando todos os dados\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Acesso negado\"))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Apagando todos os dados"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Acesso negado"]},{"tag":"br","content":null},{"tag":"code-text","content":["; nil"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Todos os dados foram apagados e a mensagem de acesso negado foi exibida. Péssimo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Quando invocamos uma função, as expressões aninhadas são avaliadas de dentro para fora, da esquerda para a direita."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com isso, nossa expressão é avaliada da seguinte forma. Vamos começar com a expressão original:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(f-unless (not autorizado)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Apagando todos os dados\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Acesso negado\"))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"bold","content":[{"tag":"text","content":["Passo 1"]}]},{"tag":"text","content":[": a expressão mais interna e que estiver mais à esquerda é avaliada."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(not autorizado) ; autorizado é false"]},{"tag":"br","content":null},{"tag":"code-text","content":["(not false)      ; not false é true"]},{"tag":"br","content":null},{"tag":"code-text","content":["true"]},{"tag":"br","content":null},{"tag":"code-text","content":[";; A expressão é substituida pelo seu respectivo valor"]},{"tag":"br","content":null},{"tag":"code-text","content":["(f-unless true"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Apagando todos os dados\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Acesso negado\"))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"bold","content":[{"tag":"text","content":["Passo 2"]}]},{"tag":"text","content":[": a próxima expressão mais interna à esquerda é avaliada."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(println \"Apagando todos os dados\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["; é exibida a mensagem \"Apagando todos os dados\"."]},{"tag":"br","content":null},{"tag":"code-text","content":["; num sistema de verdade todos os dados seriam apagados"]},{"tag":"br","content":null},{"tag":"code-text","content":["; println retorna nil"]},{"tag":"br","content":null},{"tag":"code-text","content":["(f-unless true"]},{"tag":"br","content":null},{"tag":"code-text","content":["  nil"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Acesso negado\"))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"bold","content":[{"tag":"text","content":["Passo 3"]}]},{"tag":"text","content":[": a próxima expressão mais interna à esquerda, que agora é a última, será avaliada."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(println \"Acesso negado\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["; é exibida a mensagem \"Acesso negado\""]},{"tag":"br","content":null},{"tag":"code-text","content":["; println retorna nil"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"bold","content":[{"tag":"text","content":["Passo 4"]}]},{"tag":"text","content":[": agora a função é invocada com os parâmetros já avaliados:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(f-unless true"]},{"tag":"br","content":null},{"tag":"code-text","content":["  nil"]},{"tag":"br","content":null},{"tag":"code-text","content":["  nil)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"bold","content":[{"tag":"text","content":["Passo 5"]}]},{"tag":"text","content":[": será retornado o terceiro parâmetro, que é "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":[", já que o primeiro é "]},{"tag":"monospaced","content":[{"tag":"text","content":["true"]}]},{"tag":"text","content":[":"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(f-unless (not autorizado)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Apagando todos os dados\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Acesso negado\"))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Apagando todos os dados"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Acesso negado"]},{"tag":"br","content":null},{"tag":"code-text","content":["; nil"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Por isso serão exibidas as duas mensagens, ao invés de apenas uma, e "]},{"tag":"monospaced","content":[{"tag":"text","content":["f-unless"]}]},{"tag":"text","content":[" vai retornar "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":[". Se fosse um sistema de verdade, teríamos todos os dados apagados, a mensagem de acesso negado exibida e só então só seria verificado se o usuário tem ou não permissão."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Quando usamos macros, os parâmetros só serão avaliados quando for encontrador o operador "]},{"tag":"italic","content":[{"tag":"text","content":["unquote"]}]},{"tag":"text","content":[" que, na nossa macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["unless"]}]},{"tag":"text","content":[", só são executados após passarem pelo "]},{"tag":"monospaced","content":[{"tag":"text","content":["if"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Dessa forma os parâmetros só são avaliados "]},{"tag":"italic","content":[{"tag":"text","content":["condicionalmente"]}]},{"tag":"text","content":[", ou seja, se o usuário tiver permissão, os dados serão excluídos e nenhuma mensagem de acesso negado será exibida. Caso contrário, apenas a mensagem será exibida e nenhuma informação será apagada. É exatamente o comportamento que esperamos."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["if-not"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Apesar do exemplo com "]},{"tag":"monospaced","content":[{"tag":"text","content":["unless"]}]},{"tag":"text","content":[" ser o "]},{"tag":"italic","content":[{"tag":"text","content":["Olá, Mundo"]}]},{"tag":"text","content":[" das macros, a biblioteca padrão já oferece essa funcionalidade com o nome de "]},{"tag":"monospaced","content":[{"tag":"text","content":["if-not"]}]},{"tag":"text","content":[". Reinventar a roda pode ser uma boa forma de entender como ela funciona."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Usando várias expressões ao mesmo tempo com higiente"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos implementar agora o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["using"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Relembrando, "]},{"tag":"monospaced","content":[{"tag":"text","content":["using"]}]},{"tag":"text","content":[" recebe um valor que simboliza um arquivo, uma conexão de rede, com o banco de dados ou qualquer recurso que deva ser fechado após o uso, e também uma sequência de expressões que devem ser executadas enquanto o recurso estiver aberto."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["java.io.DataInputStream"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def bis (DataInputStream."]},{"tag":"br","content":null},{"tag":"code-text","content":["           (FileInputStream."]},{"tag":"br","content":null},{"tag":"code-text","content":["             (File. \"arquivo.txt\"))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(using bis"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (.readLine bis)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para fins de teste, vamos criar um arquivo chamado "]},{"tag":"monospaced","content":[{"tag":"text","content":["arquivo.txt"]}]},{"tag":"text","content":[" contendo três linhas:"]},{"tag":"br","content":null}]},{"tag":"code","content":[{"tag":"br","content":null},{"tag":"code-text","content":["Linha 1"]},{"tag":"br","content":null},{"tag":"code-text","content":["Linha 2"]},{"tag":"br","content":null},{"tag":"code-text","content":["Linha 3"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Tudo bem simples para não perdermos o foco."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["java.io.File"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["java.io.FileInputStream"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Primeiro, vamos criar o código em Clojure que vai fazer o que queremos. Não podemos nos esquecer de importar as classes Java "]},{"tag":"monospaced","content":[{"tag":"text","content":["DataInputStream"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["File"]}]},{"tag":"text","content":[" para que nosso exemplo funcione no "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(import java.io.DataInputStream"]},{"tag":"br","content":null},{"tag":"code-text","content":["        java.io.FileInputStream"]},{"tag":"br","content":null},{"tag":"code-text","content":["        java.io.File)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A declaração de "]},{"tag":"monospaced","content":[{"tag":"text","content":["bis"]}]},{"tag":"text","content":[":"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def bis (DataInputStream."]},{"tag":"br","content":null},{"tag":"code-text","content":["           (FileInputStream."]},{"tag":"br","content":null},{"tag":"code-text","content":["             (File. \"arquivo.txt\"))))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E o código que queremos:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(let [temp bis]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (.readLine bis))"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (.close temp))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Exibindo a primeira linha do arquivo"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Linha 1"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O começo é bem parecido com o código usando macros, com um "]},{"tag":"monospaced","content":[{"tag":"text","content":["let"]}]},{"tag":"text","content":[" no lugar de "]},{"tag":"monospaced","content":[{"tag":"text","content":["using"]}]},{"tag":"text","content":[", enquanto a última linha de código é a chamada ao método "]},{"tag":"monospaced","content":[{"tag":"text","content":["close"]}]},{"tag":"text","content":[", que não aparece no nosso código com macro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Esse "]},{"tag":"monospaced","content":[{"tag":"text","content":["temp"]}]},{"tag":"text","content":[" surgiu aí por um motivo muito simples. O "]},{"tag":"monospaced","content":[{"tag":"text","content":["bis"]}]},{"tag":"text","content":[" é definido pelo usuário e nós simplesmente não temos como adivinhar qual o nome do "]},{"tag":"italic","content":[{"tag":"text","content":["binding"]}]},{"tag":"text","content":[" do usuário. Por isso criamos um "]},{"tag":"italic","content":[{"tag":"text","content":["binding"]}]},{"tag":"text","content":[" que só existe dentro da nossa macro para que possamos fechar o recurso."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Nossa macro vai receber uma quantidade indefinida de parâmetros, sendo que o primeiro contém o recurso a ser fechado, enquanto todos os outros são as expressões que serão executadas na ordem antesdo fechamento do recurso."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Tudo o que se aplica a parâmetros de funções se aplica também a parâmetros de macros, incluindo o uso de quantidades variáveis de argumentos."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro using [resource & body]"]},{"tag":"br","content":null},{"tag":"code-text","content":["; aqui vem o código da macro"]},{"tag":"br","content":null},{"tag":"code-text","content":["  )"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que vamos deixar todas as expressões em um vetor chamado "]},{"tag":"monospaced","content":[{"tag":"text","content":["body"]}]},{"tag":"text","content":[", que indica o "]},{"tag":"italic","content":[{"tag":"text","content":["corpo"]}]},{"tag":"text","content":[" da macro. Você vai notar que as bibliotecas do Clojure também chamam este argumento específico de "]},{"tag":"monospaced","content":[{"tag":"text","content":["body"]}]},{"tag":"text","content":[", então vamos manter o padrão para que você já se acostume."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Usando o que já sabemos, vamos tentar utilizar o operador "]},{"tag":"italic","content":[{"tag":"text","content":["unquote"]}]},{"tag":"text","content":[" para ver como o código se comporta. Vamos aproveitar e já invocar o método "]},{"tag":"monospaced","content":[{"tag":"text","content":["close"]}]},{"tag":"text","content":[" no nosso recurso."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro using [resource & body]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(let [temp ~resource]"]},{"tag":"br","content":null},{"tag":"code-text","content":["     ~body"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (.close temp)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Executando a nossa macro, teremos o resultado abaixo:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(using bis"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (.readLine bis)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; CompilerException java.lang.RuntimeException: Can't let qualified"]},{"tag":"br","content":null},{"tag":"code-text","content":["; name: user/temp"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos expandir a macro para encontrar o porque do erro."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(macroexpand-1 '(using bis"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  (println (.readLine bis))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/let [user/temp bis]"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   ((println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (println (.readLine bis)))"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (.close user/temp))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Perceba que nosso "]},{"tag":"italic","content":[{"tag":"text","content":["binding"]}]},{"tag":"text","content":[" local acabou sendo transformado em "]},{"tag":"monospaced","content":[{"tag":"text","content":["user/temp"]}]},{"tag":"text","content":[". Dizemos que ele "]},{"tag":"italic","content":[{"tag":"text","content":["vazou"]}]},{"tag":"text","content":[" da macro, sujando o código e causando erro na execução."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Mesmo que você force o uso de "]},{"tag":"italic","content":[{"tag":"text","content":["unquote"]}]},{"tag":"text","content":[" em "]},{"tag":"monospaced","content":[{"tag":"text","content":["temp"]}]},{"tag":"text","content":[", o problema não vai ser resolvido. Como podemos usar "]},{"tag":"italic","content":[{"tag":"text","content":["unquote"]}]},{"tag":"text","content":[" em um símbolo que ainda não existe? Pior ainda, num símbolo que estamos tentando criar?"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro using [resource & body]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(let [~temp ~resource]"]},{"tag":"br","content":null},{"tag":"code-text","content":["     ~body"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (.close ~temp)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; CompilerException java.lang.RuntimeException:"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Unable to resolve symbol: temp in this context"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A coisa pode ficar pior ainda. E se "]},{"tag":"monospaced","content":[{"tag":"text","content":["temp"]}]},{"tag":"text","content":[" já existir e não tiver absolutamente nada a ver com nossa macro?"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def temp \"banana\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro using [resource & body]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(let [~temp ~resource]"]},{"tag":"br","content":null},{"tag":"code-text","content":["     ~body"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (.close ~temp)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora não deu erro. Ainda."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos ver como fica a macro após ser expandida:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(macroexpand-1 '(using bis"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  (println (.readLine bis))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/let [\"banana\" bis]"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   ((println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":[";    (println (.readLine bis)))"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (.close \"banana\"))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Na primeira linha da expansão vemos um "]},{"tag":"italic","content":[{"tag":"text","content":["binding"]}]},{"tag":"text","content":[" atribuindo o valor de "]},{"tag":"monospaced","content":[{"tag":"text","content":["bis"]}]},{"tag":"text","content":[", que contém uma instância de "]},{"tag":"monospaced","content":[{"tag":"text","content":["DataInputStream"]}]},{"tag":"text","content":[" para a "]},{"tag":"italic","content":[{"tag":"text","content":["String"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["banana"]}]},{"tag":"text","content":[". Não só não funciona como nem ao menos faz sentido."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Na última linha a coisa não fica melhor. A macro vai tentar executar o método "]},{"tag":"monospaced","content":[{"tag":"text","content":["close"]}]},{"tag":"text","content":[" em um texto, o que também não funciona nem faz sentido."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(using bis"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (.readLine bis)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Exception Unsupported binding form: banana"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["higiene de macro"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para resolver essa sujeira causada pelo vazamento, vamos usar um recurso chamado "]},{"tag":"italic","content":[{"tag":"text","content":["higiene de macro"]}]},{"tag":"text","content":[" ou "]},{"tag":"italic","content":[{"tag":"text","content":["expansão higiênica de macros"]}]},{"tag":"text","content":[". Sim, o nome é esse mesmo. Vamos tornar nossa macro "]},{"tag":"italic","content":[{"tag":"text","content":["higiênica"]}]},{"tag":"ref","content":[{"tag":"text","content":["hygienic-macro"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["Higiene"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Você vai encontrar material sobre macros higiênicas em Inglês com o nome de "]},{"tag":"italic","content":[{"tag":"text","content":["hygienic macros"]}]},{"tag":"text","content":[" ou "]},{"tag":"italic","content":[{"tag":"text","content":["hygienic macro expansion"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para isso vamos usar um operador chamado "]},{"tag":"italic","content":[{"tag":"text","content":["gensym"]}]},{"tag":"text","content":[", do Inglês "]},{"tag":"italic","content":[{"tag":"text","content":["generated symbol"]}]},{"tag":"text","content":[". "]},{"tag":"italic","content":[{"tag":"text","content":["Gensym"]}]},{"tag":"text","content":[" vai dizer ao compilador que ele deve gerar um símbolo, por isso o nome, cujo nome ainda não esteja sendo utilizado."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["#"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para isso basta utilizarmos o caracter "]},{"tag":"monospaced","content":[{"tag":"text","content":["#"]}]},{"tag":"text","content":[" após o nome do símbolo."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["`temp#"]},{"tag":"br","content":null},{"tag":"code-text","content":["; temp__769__auto__"]},{"tag":"br","content":null},{"tag":"code-text","content":["`a#"]},{"tag":"br","content":null},{"tag":"code-text","content":["; a__772__auto__"]},{"tag":"br","content":null},{"tag":"code-text","content":["`(a# b# c#)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (a__775__auto__ b__776__auto__ c__777__auto__)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos agora fazer com que "]},{"tag":"monospaced","content":[{"tag":"text","content":["temp"]}]},{"tag":"text","content":[" seja gerado no momento da criação da macro. Vamos manter o "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["temp"]}]},{"tag":"text","content":[" contendo "]},{"tag":"italic","content":[{"tag":"text","content":["banana"]}]},{"tag":"text","content":[" para termos certeza de que dessa vez não vai haver vazamento:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def temp \"banana\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro using [resource & body]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(let [temp# ~resource]"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (println ~body)"]},{"tag":"br","content":null},{"tag":"code-text","content":["     ~body"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (.close temp#)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Compilou sem erro. Vamos ver agora a versão expandida."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(macroexpand-1 '(using bis"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  (println (.readLine bis))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/let [temp__772__auto__ bis]"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   ((println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":[";    (println (.readLine bis)))"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (.close temp__772__auto__))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note o símbolo "]},{"tag":"monospaced","content":[{"tag":"text","content":["temp_772_auto_"]}]},{"tag":"text","content":[", criado especialmente para a nossa macro. Pode ficar tranquilo que não há chance de que esse símbolo interfira em algo que exista fora da macro. Perceba também que o "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["temp"]}]},{"tag":"text","content":[" com sua banana nem ao menos aparecem."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ainda há um problema no nosso código expandido, mas já vamos chegar nele."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Finalmente, vamos executar a macro para ver o que acontece."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(using bis"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (.readLine bis)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Exibindo a primeira linha do arquivo"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Linha 1"]},{"tag":"br","content":null},{"tag":"code-text","content":["; NullPointerException   user/eval788 (NO_SOURCE_FILE:3)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["java.lang.NullPointerException"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ah, o sempre nefasto "]},{"tag":"monospaced","content":[{"tag":"text","content":["NullPointerException"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Se voltamos à expansão da macro, na linha "]},{"tag":"monospaced","content":[{"tag":"text","content":["2"]}]},{"tag":"text","content":[" vamos ver dois parênteses sendo abertos."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/let [temp__772__auto__ bis]           1"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   ((println \"Exibindo a primeira linha do arquivo\") 2"]},{"tag":"br","content":null},{"tag":"code-text","content":[";    (println (.readLine bis)))                       3"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (.close temp__772__auto__))                       4"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Lembre-se que as expressões são avaliadas de dentro para fora, da esquerda para a direita."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A primeira expressão, que exibe a mensagem \"Exibindo a primeira linha do arquivo\", retorna "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":[" por conta do "]},{"tag":"monospaced","content":[{"tag":"text","content":["println"]}]},{"tag":"text","content":[". A expressão seguinte, também com "]},{"tag":"monospaced","content":[{"tag":"text","content":["println"]}]},{"tag":"text","content":[", também retorna "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com isso nossa expressão acaba virando "]},{"tag":"monospaced","content":[{"tag":"text","content":["(nil nil)"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como o primeiro item da lista deve ser um operador, o compilador tenta invocar o método "]},{"tag":"monospaced","content":[{"tag":"text","content":["invoke"]}]},{"tag":"text","content":[", como vimos no capítulo "]},{"tag":"ref-label","content":[{"tag":"text","content":["capitulo-funcoes"]}]},{"tag":"text","content":[". Ao tentar executar um método em um valor nulo, temos o tal "]},{"tag":"monospaced","content":[{"tag":"text","content":["NullPointerException"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Tudo muito legal, mas como resolver?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Nosso argumento "]},{"tag":"monospaced","content":[{"tag":"text","content":["body"]}]},{"tag":"text","content":[" é um vetor contendo as expressões que devem ser executadas enquanto o recurso estiver aberto. Para que essas expressões sejam executadas uma a uma, devemos utilizar um tipo específico de "]},{"tag":"italic","content":[{"tag":"text","content":["unquote"]}]},{"tag":"text","content":[", chamado "]},{"tag":"italic","content":[{"tag":"text","content":["unquote splicing"]}]},{"tag":"text","content":[". Ao invés de utilizarmos o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["~"]}]},{"tag":"text","content":[", vamos utilizar "]},{"tag":"monospaced","content":[{"tag":"text","content":["~@"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Mais para o início do capítulo vimos o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["~@"]}]},{"tag":"text","content":[" mas não entramos em detalhe sobre o que ele faz nem como funciona."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos modificar o código da macro e expandir para ver como ficou."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro using [resource & body]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(let [temp# ~resource]"]},{"tag":"br","content":null},{"tag":"code-text","content":["     ~@body"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (.close temp#)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(macroexpand-1 '(using bis"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  (println (.readLine bis))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (clojure.core/let [temp__843__auto__ bis]"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (println (.readLine bis))"]},{"tag":"br","content":null},{"tag":"code-text","content":[";   (.close temp__843__auto__))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que as expressões que foram passadas por parâmetro agora estão no mesmo nível de aninhamento da chamada ao método "]},{"tag":"monospaced","content":[{"tag":"text","content":["close"]}]},{"tag":"text","content":[". Com isso matamos o problema do "]},{"tag":"monospaced","content":[{"tag":"text","content":["NullPointerException"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos executar o código completo para ver nossa macro funcionando redondinha:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(import java.io.DataInputStream"]},{"tag":"br","content":null},{"tag":"code-text","content":["        java.io.FileInputStream"]},{"tag":"br","content":null},{"tag":"code-text","content":["        java.io.File)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(def bis (DataInputStream."]},{"tag":"br","content":null},{"tag":"code-text","content":["           (FileInputStream."]},{"tag":"br","content":null},{"tag":"code-text","content":["             (File. \"arquivo.txt\"))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(using bis"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Exibindo a primeira linha do arquivo\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (.readLine bis)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Exibindo a primeira linha do arquivo"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Linha 1"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Funcionou."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Podemos inclusive melhorar o código da nossa macro adicionando tratamento de erros. Dessa forma, mesmo que algo dê errado durante a execução do corpo da macro, o recurso será fechado."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro using [resource & body]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(let [temp# ~resource]"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (try"]},{"tag":"br","content":null},{"tag":"code-text","content":["       ~@body"]},{"tag":"br","content":null},{"tag":"code-text","content":["       (finally"]},{"tag":"br","content":null},{"tag":"code-text","content":["        (.close temp#)))))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["with-open"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Caso você queira usar a nossa macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["using"]}]},{"tag":"text","content":[", o Clojure oferece a funcionalidade com o nome de "]},{"tag":"monospaced","content":[{"tag":"text","content":["with-open"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(import java.io.DataInputStream"]},{"tag":"br","content":null},{"tag":"code-text","content":["        java.io.FileInputStream"]},{"tag":"br","content":null},{"tag":"code-text","content":["        java.io.File)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(with-open [bis (DataInputStream."]},{"tag":"br","content":null},{"tag":"code-text","content":["                  (FileInputStream."]},{"tag":"br","content":null},{"tag":"code-text","content":["                    (File. \"arquivo.txt\")))]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (.readLine bis)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Linha 1"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que a implementação padrão do Clojure é bem mais sofisticada que a nossa, além de conter na própria declaração a abertura do arquivo. Caso você tenha curiosidade de ver o código, basta digitar "]},{"tag":"monospaced","content":[{"tag":"text","content":["(source with-open)"]}]},{"tag":"text","content":[" no "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ainda falta o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["each"]}]},{"tag":"text","content":[", em que vamos imitar o método de mesmo nome do Ruby."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["each"]}]},{"tag":"text","content":[" vai trabalhar com dois argumentos. No primeiro temos um "]},{"tag":"italic","content":[{"tag":"text","content":["binding"]}]},{"tag":"text","content":[" onde cada membro de uma sequencia será atribuido para um símbolo. O segundo argumento é o código a ser executado com esse símbolo."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def lista-itens (range 1 11))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(each [item lista-itens]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (* 2 item)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos utilizar de "]},{"tag":"italic","content":[{"tag":"text","content":["destructuring"]}]},{"tag":"text","content":[" na lista de parâmetros da macro para podermos separar o símbolo do valor a ser atribuído."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro each [[item list] & body]"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Na macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["each"]}]},{"tag":"text","content":[" temos que lembrar do que é um "]},{"tag":"italic","content":[{"tag":"text","content":["símbolo"]}]},{"tag":"text","content":[". Um símbolo é um tipo de dado que aponta para outro dado, por isso usamos símbolos para "]},{"tag":"italic","content":[{"tag":"text","content":["binding"]}]},{"tag":"text","content":[". "]},{"tag":"italic","content":[{"tag":"text","content":["Binding"]}]},{"tag":"text","content":[" significa, ao pé da letra, "]},{"tag":"italic","content":[{"tag":"text","content":["amarração"]}]},{"tag":"text","content":[". Então pense que amarramos um valor a um símbolo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Dito isso, podemos considerar um símbolo como um tipo de dado como qualquer outro, e ele de fato é, que pode ser passado por parâmetro como qualquer outro tipo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Em tempo de execução o símbolo será avaliado e teremos um erro caso ele não tenha um valor atribuído. Já em tempo de compilação podemos passar um símbolo livremente sem medo de erros, desde que no momento da execução o símbolo tenha um valor atribuído."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos utilizar esse símbolo no "]},{"tag":"italic","content":[{"tag":"text","content":["binding"]}]},{"tag":"text","content":[" do "]},{"tag":"monospaced","content":[{"tag":"text","content":["loop"]}]},{"tag":"text","content":[", já que vamos consumir a sequencia utilizando "]},{"tag":"italic","content":[{"tag":"text","content":["tail call recursion"]}]},{"tag":"text","content":[". Veja os diversos conceitos que viemos aprendendo até aqui sendo utilizados na prática."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar também um "]},{"tag":"italic","content":[{"tag":"text","content":["gemsys"]}]},{"tag":"text","content":[" para armazenar o resto da lista, já que o primeiro item, que é o que interessa para o corpo, vai ser amarrado ao símbolo que foi recebido por parâmetro."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["  `(loop [~item (first ~list)"]},{"tag":"br","content":null},{"tag":"code-text","content":["          list# (next ~list)]"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos definir a condição de parada do "]},{"tag":"monospaced","content":[{"tag":"text","content":["loop"]}]},{"tag":"text","content":[": quando a lista terminar de ser consumida, devemos finalizar a execução da macro. Antes disso, devemos executar as instruções do corpo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Finalmente, vamos pegar o primeiro item do resto da lista e atribuí-lo novamente ao símbolo, enquanto o resto do resto da lista fica no "]},{"tag":"italic","content":[{"tag":"text","content":["gensym"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["    (when list#"]},{"tag":"br","content":null},{"tag":"code-text","content":["      ~@body"]},{"tag":"br","content":null},{"tag":"code-text","content":["      (recur (first list#)"]},{"tag":"br","content":null},{"tag":"code-text","content":["             (next list#)))))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Terminamos. O nosso código completo ficaria assim:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro each [[item list] & body]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(loop [~item (first ~list)"]},{"tag":"br","content":null},{"tag":"code-text","content":["          list# (next ~list)]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (when list#"]},{"tag":"br","content":null},{"tag":"code-text","content":["      ~@body"]},{"tag":"br","content":null},{"tag":"code-text","content":["      (recur (first list#)"]},{"tag":"br","content":null},{"tag":"code-text","content":["             (next list#)))))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos ver o nosso código funcionando:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def lista-itens (range 1 11))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(each [item lista-itens]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (* 2 item)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 2"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 4"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 8"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 10"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 12"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 14"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 16"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 18"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Simples assim nós conseguimos criar operadores no Clojure tão bacanas quanto aqueles de outras linguagens."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Quando usar e quando não usar macros"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Quando tive meus primeiros contatos com um dialeto LISP, tinha ouvido falar maravilhas a respeito de macros e achava que dominando o assunto eu me tornaria um mestre na linguagem."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ledo engano."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Macros são uma parte importante da linguagem e devem sim ser estudadas, mas não podemos nos esquecer de alguns pequenos detalhes antes de decidirmos escrever uma macro."]},{"tag":"br","content":null}]},{"tag":"title","content":[{"tag":"text","content":["Não escreva uma macro se uma função pode resolver"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Existem casos em que uma macro resolve problemas que uma função não consegue, como vimos ao criar a macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["unless"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Porém, uma das grandes vantagens da programação funcional é justamente o fato de uma função ser considerada um valor. Isso nos permite passar funções por parâmetro para outra função ou fazer com que uma função devolva outra função como resultado."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com macros não temos isso, o que faz com que macros não sejam funcionais."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro m+ [a b]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(+ ~a ~b))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(m+ 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 5"]},{"tag":"br","content":null},{"tag":"code-text","content":["(apply m+ [1 2 3 4])"]},{"tag":"br","content":null},{"tag":"code-text","content":["; CompilerException java.lang.RuntimeException: Can't take value of a"]},{"tag":"br","content":null},{"tag":"code-text","content":["; macro: #'user/m+,"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Macros são executadas em tempo de compilação, num momento em que funções e seus valores ainda não existem. Já as funções são executadas em tempo de execução, num momento em que a macro já foi criada, executada e já saiu para comprar cigarro para nunca mais voltar."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Veja um exemplo bacana do que acontece ao misturarmos macros e funções. Relaxe, é algo que acontece o tempo todo."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro minha-macro []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Macro sendo executada\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  6)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defn minha-funcao []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"E o valor é\" (minha-macro)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Macro sendo executada"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #'user/minha-funcao"]},{"tag":"br","content":null},{"tag":"code-text","content":["user=> (minha-funcao)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; E o valor é 6"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que "]},{"tag":"monospaced","content":[{"tag":"text","content":["minha-macro"]}]},{"tag":"text","content":[" foi executada enquanto "]},{"tag":"monospaced","content":[{"tag":"text","content":["minha-funcao"]}]},{"tag":"text","content":[" estava sendo criada. na prática é como se o corpo de "]},{"tag":"monospaced","content":[{"tag":"text","content":["minha-funcao"]}]},{"tag":"text","content":[" se transformasse em "]},{"tag":"monospaced","content":[{"tag":"text","content":["(println \"E o valor é\" 6))"]}]},{"tag":"text","content":[" instantes antes de ser executado."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Partindo do princípio de que, em uma linguagem funcional, uma função é tratada como um valor qualquer, eis uma regra simples de lembrar: função é valor que gera ou transforma valor, enquanto macro é código que gera código."]},{"tag":"br","content":null}]},{"tag":"title","content":[{"tag":"text","content":["Macros são mais difíceis de desenvolver"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Macros são mais difíceis de desenvolver do que funções. Não difícil no sentido de conseguir a paz mundial ou de achar graça da piada do seu chefe, mas no sentido de que exige um pouco mais de atenção e cuidado para escrever e depois caçar possíveis erros."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Macros são expandidas e executadas em tempo de compilação. Quando ocorre algum erro durante a execução de uma macro, podemos não ter toda aquela informação sobre local do erro, número de linha e mesmo as mensagens de erro exigem um pouco mais de atenção sobre o que está acontecendo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Quando escrevemos uma macro, temos que pensar "]},{"tag":"italic","content":[{"tag":"text","content":["em duas camadas"]}]},{"tag":"text","content":[". Particularmente eu penso primeiro no código que eu quero após a expansão. Para isso escrevo código Clojure que faz o que preciso, sem pensar em macros."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com esse código funcionando eu começo a transformá-lo em macro. Primeiro eu pensei no que preciso para o tempo de execução e depois converto para o que preciso em tempo de compilação. Você teve mostras disso na forma como as nossas macros foram criadas."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com tempo e experiência nada impede que você escreva a macro diretamente, expandindo o código dentro da sua cabeça. Mas digo por experiência própria que qualquer erro que ocorra pode ser bem mais difícil de encontrar."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["macroexpand"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro causa-erro [valor]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  `(let [~'simbolo# ~valor]"]},{"tag":"br","content":null},{"tag":"code-text","content":["     (println simbolo)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(causa-erro :angu)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; CompilerException java.lang.RuntimeException: No such var:"]},{"tag":"br","content":null},{"tag":"code-text","content":["; user/simbolo, compiling:(NO_SOURCE_PATH:1:1)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"italic","content":[{"tag":"text","content":["Ué, mas eu declarei "]},{"tag":"monospaced","content":[{"tag":"text","content":["simbolo"]}]},{"tag":"text","content":[" no meu código."]}]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(macroexpand '(causa-erro :angu))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (let* [simbolo :angu] (clojure.core/println user/simbolo))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"italic","content":[{"tag":"text","content":["Ah, faltou um "]},{"tag":"monospaced","content":[{"tag":"text","content":["quote"]}]},{"tag":"text","content":[" no meu código."]}]},{"tag":"br","content":null}]},{"tag":"title","content":[{"tag":"text","content":["Uma macro pode ser usada para otimizar o código"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Assim como a compilação "]},{"tag":"italic","content":[{"tag":"text","content":["ahead-of-time"]}]},{"tag":"text","content":[" simplesmente muda o momento em que a compilação ocorre, mover um processamento pesado para uma macro move o momento em que a demora ocorre. Passamos a perder algum tempo na compilação para ganhar tempo em execução."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Além de técnicas como "]},{"tag":"italic","content":[{"tag":"text","content":["type hinting"]}]},{"tag":"text","content":[" e memoização, essa pode ser uma abordagem a ser considerada, dependendo do caso."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos supor que nossa função contenha um cálculo que leve trinta segundos para ser executado."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn funcao-demorada []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Calculando\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (Thread/sleep 30000)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  42)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(time (funcao-demorada))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Calculando"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \"Elapsed time: 29999.913863 msecs\""]},{"tag":"br","content":null},{"tag":"code-text","content":["; 42"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Movendo o cálculo para uma macro, podemos ter o seguinte:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro calculo-demorado []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (Thread/sleep 30000)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  42)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defn funcao-demorada-2 []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Calculando\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (calculo-demorado))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(time (funcao-demorada-2))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Calculando"]},{"tag":"br","content":null},{"tag":"code-text","content":["\"Elapsed time: 1.685714 msecs\""]},{"tag":"br","content":null},{"tag":"code-text","content":["; 42"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A execução ficou bem mais rápida. Note que a macro foi encapsulada em uma função para não perdermos as propriedades de "]},{"tag":"italic","content":[{"tag":"text","content":["high order function"]}]},{"tag":"text","content":[" ou de composição da nossa função original."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Podemos também utilizar macros para determinar valores que não devem ser alterados a partir da compilação. Uma versão ou a data de compilação, por exemplo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos imaginar que temos um arquivo chamado "]},{"tag":"monospaced","content":[{"tag":"text","content":["versao.txt"]}]},{"tag":"text","content":[" que é gerado automaticamente durante a compilação da sua aplicação."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Esse arquivo tem apenas uma linha escrita "]},{"tag":"monospaced","content":[{"tag":"text","content":["1.2.3"]}]},{"tag":"text","content":[". Nada mais."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro versao-sistema []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (slurp \"versao.txt\"))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defn info-sistema []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Versão: \" (versao-sistema)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Considerando que tenha sido utilizada compilação "]},{"tag":"italic","content":[{"tag":"text","content":["AOT"]}]},{"tag":"text","content":[", você distribui sua aplicação sem o tal arquivo. Como estamos usando o "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[", vamos renomear ou apagar o arquivo."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(info-sistema)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Versão:  1.2.3"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A função funciona sem problemas. Não precisamos mais do arquivo "]},{"tag":"monospaced","content":[{"tag":"text","content":["versao.txt"]}]},{"tag":"text","content":[" porque seu conteúdo já foi lido em tempo de compilação."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Podemos expandir a brincadeira tambem:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro data-compilacao []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (java.util.Date.))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defn data-agora []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (java.util.Date.))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que, com exceção os operadores "]},{"tag":"monospaced","content":[{"tag":"text","content":["defmacro"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["defn"]}]},{"tag":"text","content":[" os códigos são exatamente iguais."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn info-data []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Sistema compilado em\" (data-compilacao))"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println \"Data e hora atuais  \" (data-agora))"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (Thread/sleep 5000))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(repeatedly 3 info-data)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; Sistema compilado em #inst \"2015-01-31T13:26:18.526-00:00\""]},{"tag":"br","content":null},{"tag":"code-text","content":["; Data e hora atuais   #inst \"2015-01-31T13:26:18.595-00:00\""]},{"tag":"br","content":null},{"tag":"code-text","content":["; Sistema compilado em #inst \"2015-01-31T13:26:18.526-00:00\""]},{"tag":"br","content":null},{"tag":"code-text","content":["; Data e hora atuais   #inst \"2015-01-31T13:26:23.596-00:00\""]},{"tag":"br","content":null},{"tag":"code-text","content":["; Sistema compilado em #inst \"2015-01-31T13:26:18.526-00:00\""]},{"tag":"br","content":null},{"tag":"code-text","content":["; Data e hora atuais   #inst \"2015-01-31T13:26:28.600-00:00\""]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A função "]},{"tag":"monospaced","content":[{"tag":"text","content":["repeatedly"]}]},{"tag":"text","content":[" faz com que uma função passada por parâmetro seja repetida por quantas vezes quisermos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que a data de compilação permanece inalterada enquanto a data e horas atuais são atualizadas a cada cinco segundos."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["macros, &env"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["macros, &post"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Os argumentos implícitos &env e &form"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["As macros nos presenteiam ainda com dois parâmetros pouco conhecidos e surpreendentes. Eles são considerados parâmetros implícitos porque você não os declara ao criar a sua macro, mas internamente o Clojure dá um jeito de passá-lo para o seu código."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com elas você tem controle não apenas no que será avaliado em tempo de execução, mas também em como sua macro está sendo utilizada e nos "]},{"tag":"italic","content":[{"tag":"text","content":["bindings"]}]},{"tag":"text","content":[" disponíveis no contexto atual."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos brincar com o parâmetro "]},{"tag":"monospaced","content":[{"tag":"text","content":["&env"]}]},{"tag":"text","content":[". Ele disponibiliza todos os "]},{"tag":"italic","content":[{"tag":"text","content":["bindings"]}]},{"tag":"text","content":[" disponíveis no contexto em que a macro está sendo executada."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar uma macro chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["mostra-env"]}]},{"tag":"text","content":[" que simplesmente exibe o conteúdo de "]},{"tag":"monospaced","content":[{"tag":"text","content":["&env"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro mostra-env []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println &env))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que nosso código não usa "]},{"tag":"italic","content":[{"tag":"text","content":["syntax-quote"]}]},{"tag":"text","content":[", já que não temos código para expandir, e sim código para ser executado da forma que está durante a compilação."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(mostra-env)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; nil"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Foi impresso "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":[" por não termos nenhum "]},{"tag":"italic","content":[{"tag":"text","content":["binding"]}]},{"tag":"text","content":[" no contexto da execução da macro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar um "]},{"tag":"italic","content":[{"tag":"text","content":["local binding"]}]},{"tag":"text","content":[" e testar de novo."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(let [tchubiru \"iéié\"]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (mostra-env))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; {tchubiru #<LocalBinding"]},{"tag":"br","content":null},{"tag":"code-text","content":["; clojure.lang.Compiler$LocalBinding@7875e769>}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["De dentro da macro conseguimos encontrar o "]},{"tag":"italic","content":[{"tag":"text","content":["binding"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["tchubiru"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos usar vários para continuar a brincadeira."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(let [tchubiru \"iéié\""]},{"tag":"br","content":null},{"tag":"code-text","content":["      squidum  \"samba\""]},{"tag":"br","content":null},{"tag":"code-text","content":["      putsputs \"dance\"]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (mostra-env))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; {putsputs #<LocalBinding"]},{"tag":"br","content":null},{"tag":"code-text","content":["; clojure.lang.Compiler$LocalBinding@492a88bc>, squidum"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #<LocalBinding clojure.lang.Compiler$LocalBinding@c280ffd>,"]},{"tag":"br","content":null},{"tag":"code-text","content":["; tchubiru #<LocalBinding"]},{"tag":"br","content":null},{"tag":"code-text","content":["; clojure.lang.Compiler$LocalBinding@58b04137>}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Reparem que cada "]},{"tag":"italic","content":[{"tag":"text","content":["local binding"]}]},{"tag":"text","content":[" é um objeto do tipo "]},{"tag":"monospaced","content":[{"tag":"text","content":["LocalBinding"]}]},{"tag":"text","content":[". Isso vai nos abrir possibilidades para algumas brincadeiras mais avançadas."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como já dissemos em capítulos anteriores, argumentos de funções também funcionam como "]},{"tag":"italic","content":[{"tag":"text","content":["local bindings"]}]},{"tag":"text","content":[", e podemos provar isso com nossa macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["mostra-env"]}]},{"tag":"text","content":[". Vamos criar uma função com três argumentos para ver o que acontece."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn funcao-com-parametros [par1 par2 par3]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (mostra-env))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; {par3 #<LocalBinding clojure.lang.Compiler$LocalBinding@365b00ac>,"]},{"tag":"br","content":null},{"tag":"code-text","content":["; par2 #<LocalBinding clojure.lang.Compiler$LocalBinding@1653733>,"]},{"tag":"br","content":null},{"tag":"code-text","content":["; par1 #<LocalBinding clojure.lang.Compiler$LocalBinding@1fb5db38>}"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #'user/funcao-com-parametros"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Perceba que os "]},{"tag":"italic","content":[{"tag":"text","content":["bindings"]}]},{"tag":"text","content":[" foram exibidos durante a criação da função, ou seja, durante a fase de compilação."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E o que acontece se executarmos a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["funcao-com-parametros"]}]},{"tag":"text","content":["? Que valor será exibido?"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(funcao-com-parametros 1 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; nil"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como a macro é executada em tempo de compilação e a nossa macro retorna "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":[" por conta do retorno de "]},{"tag":"monospaced","content":[{"tag":"text","content":["println"]}]},{"tag":"text","content":[", é como se a linguagem substituisse a chamada à macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["mostra-env"]}]},{"tag":"text","content":[" por um "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":[" em tempo de execução. E, aliás, é exatamente isso o que acontece."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Cada objeto "]},{"tag":"monospaced","content":[{"tag":"text","content":["LocalBinding"]}]},{"tag":"text","content":[" tem uma propriedade "]},{"tag":"monospaced","content":[{"tag":"text","content":["init"]}]},{"tag":"text","content":[" que contém a expressão que foi atribuída ao símbolo. E cada expressão tem um método "]},{"tag":"monospaced","content":[{"tag":"text","content":["eval"]}]},{"tag":"text","content":[" que retorna seu respectivo valor. No final das contas é exatamente isso que o próprio Clojure faz quando utilizamos um símbolo no código."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como estamos trabalhando em tempo de compilação com macros, podemos controlar a compilação como for conveniente."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro mostra-env-valores []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (doseq [[k v] &env]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (println k \"=\" (.eval (.init v)))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(let [tchubiru \"iéié\""]},{"tag":"br","content":null},{"tag":"code-text","content":["      squidum  \"samba\""]},{"tag":"br","content":null},{"tag":"code-text","content":["      putsputs \"dance\"]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (mostra-env-valores))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; putsputs = dance"]},{"tag":"br","content":null},{"tag":"code-text","content":["; squidum = samba"]},{"tag":"br","content":null},{"tag":"code-text","content":["; tchubiru = iéié"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O objeto "]},{"tag":"monospaced","content":[{"tag":"text","content":["LocalBinding"]}]},{"tag":"text","content":[" nos permite saber também se o "]},{"tag":"italic","content":[{"tag":"text","content":["binding"]}]},{"tag":"text","content":[" é ou não um argumento da função atual. Talvez isso seja útil algum dia, quem sabe?"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro mostra-env-args []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (doseq [[k v] &env]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (let [arg (if (.isArg v)"]},{"tag":"br","content":null},{"tag":"code-text","content":["                 \"é\""]},{"tag":"br","content":null},{"tag":"code-text","content":["                 \"não é\")]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (println k \"=\" arg \"um argumento da função\"))))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(let [tchubiru \"iéié\""]},{"tag":"br","content":null},{"tag":"code-text","content":["      squidum  \"samba\""]},{"tag":"br","content":null},{"tag":"code-text","content":["      putsputs \"dance\"]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (mostra-env-args))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; putsputs = não é um argumento da função"]},{"tag":"br","content":null},{"tag":"code-text","content":["; squidum = não é um argumento da função"]},{"tag":"br","content":null},{"tag":"code-text","content":["; tchubiru = não é um argumento da função"]},{"tag":"br","content":null},{"tag":"code-text","content":["; &env = é um argumento da função"]},{"tag":"br","content":null},{"tag":"code-text","content":["; &form = é um argumento da função"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #'user/mostra-env-args"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["Cuidado com detalhes de implementação"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Apesar de pouco provável, detalhes internos da linguagem sempre podem ser alterados. Amanhã ou depois alguém pode ter uma ideia genial e decidir que "]},{"tag":"monospaced","content":[{"tag":"text","content":["LocalBinding"]}]},{"tag":"text","content":[" pode ser diferente para ser mais rápido e gastar menos memória."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["De qualquer maneira, eu recomendo fortemente que, quando possível, você olhe o código fonte de qualquer ferramenta que você esteja utilizando e isso inclui o Clojure. Isso pode te ajudar a escrever código que aproveite melhor os recursos da máquina de forma idiomática."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Aqui temos uma situação inesperada. Os símbolos "]},{"tag":"monospaced","content":[{"tag":"text","content":["tchubiru"]}]},{"tag":"text","content":[", "]},{"tag":"monospaced","content":[{"tag":"text","content":["squidum"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["putsputs"]}]},{"tag":"text","content":[" realmente não são argumentos de função. Mas e "]},{"tag":"monospaced","content":[{"tag":"text","content":["&env"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["&form"]}]},{"tag":"text","content":["? De onde eles surgiram se nem ao menos estamos dentro de uma função."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos descobrir."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ao criarmos uma macro, internamente é criado um "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[" com o nome que demos, e alguma estrutura que não conhecemos ainda é atribuída a esse "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para sabermos que valor um "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[" está guardando, usamos o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["deref"]}]},{"tag":"text","content":[" ou "]},{"tag":"monospaced","content":[{"tag":"text","content":["@"]}]},{"tag":"text","content":[". Vamos usar a nossa macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["mostra-env"]}]},{"tag":"text","content":[" para avaliar isso. Ela foi escolhida apenas por ter o código mais simples, mas você pode testar com qualquer macro que quiser."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["@#'mostra-env"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #<user$mostra_env user$mostra_env@6181b1b2>"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Certo, temos um objeto do tipo "]},{"tag":"monospaced","content":[{"tag":"text","content":["user$mostra_env"]}]},{"tag":"text","content":[". Até aqui, nenhuma novidade. Lembre que dissemos que uma função no Clojure é representada por uma classe interna dentro de outra classe que tem o nome do "]},{"tag":"italic","content":[{"tag":"text","content":["namespace"]}]},{"tag":"text","content":[". Vamos avaliar então se esse objeto é uma função."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(isa? (class @#'mostra-env) clojure.lang.AFunction)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; true"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Surpresa. Internamente uma macro guarda seu código como se fosse uma função. Relembrando que macros e funções são coisas diferentes, mas internamente são armazenadas da mesma forma."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Já que o "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["mostra-env"]}]},{"tag":"text","content":[" contém uma função, vamos tentar executá-la."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(@#'mostra-env)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; ArityException Wrong number of args (0) passed to:"]},{"tag":"br","content":null},{"tag":"code-text","content":["; user/mostra-env  clojure.lang.AFn.throwArity (AFn.java:429)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Esse erro indica que a função deveria receber argumentos e não passamos nenhum. Quantos argumentos nós não sabemos. Vamos então criar uma função auxiliar que retorna a quantidade de argumentos que uma função deve receber. Vamos chamá-la de "]},{"tag":"monospaced","content":[{"tag":"text","content":["arg-count"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn arg-count [f]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (let [m (first (.getDeclaredMethods (class f)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["        p (.getParameterTypes m)]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (alength p)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Aqui usamos mais um pouco de "]},{"tag":"italic","content":[{"tag":"text","content":["reflection"]}]},{"tag":"text","content":[". O método "]},{"tag":"monospaced","content":[{"tag":"text","content":["getDeclaredMethods"]}]},{"tag":"text","content":[" nos retorna um "]},{"tag":"italic","content":[{"tag":"text","content":["array"]}]},{"tag":"text","content":[" com os método daquele objeto. Uma função normalmente vai ter apenas um método, que é justamente "]},{"tag":"monospaced","content":[{"tag":"text","content":["invoke"]}]},{"tag":"text","content":[". Caso tenha mais de um, usamos apenas o primeiro deles. Não é perfeito, mas funciona bem para o que precisamos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Então usamos o método "]},{"tag":"monospaced","content":[{"tag":"text","content":["getParameterTypes"]}]},{"tag":"text","content":[" para retornar um "]},{"tag":"italic","content":[{"tag":"text","content":["array"]}]},{"tag":"text","content":[" contendo os tipos de cada argumento. Por fim, usamos a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["alength"]}]},{"tag":"text","content":[" para saber o tamanho de um "]},{"tag":"italic","content":[{"tag":"text","content":["array"]}]},{"tag":"text","content":[" Java."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Juntando tudo temos:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(arg-count @#'mostra-env)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 2"]},{"tag":"br","content":null},{"tag":"code-text","content":["(@#'mostra-env nil nil)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; nil"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Então você se pergunta "]},{"tag":"italic","content":[{"tag":"text","content":["de onde vieram esses dois argumentos se a nossa macro não tinha argumento nenhum?"]}]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Esses argumentos são justamente "]},{"tag":"monospaced","content":[{"tag":"text","content":["&form"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["&env"]}]},{"tag":"text","content":[", que ficam escondidos da chamada da macro. Por isso são chamados "]},{"tag":"italic","content":[{"tag":"text","content":["argumentos implícitos"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Já que estamos aqui, vamos descobrir então qual deles é "]},{"tag":"monospaced","content":[{"tag":"text","content":["&form"]}]},{"tag":"text","content":[" e qual deles é "]},{"tag":"monospaced","content":[{"tag":"text","content":["&env"]}]},{"tag":"text","content":[". Vamos passar dois argumentos para a função. Como "]},{"tag":"monospaced","content":[{"tag":"text","content":["mostra-env"]}]},{"tag":"text","content":[" manda exibir "]},{"tag":"monospaced","content":[{"tag":"text","content":["&env"]}]},{"tag":"text","content":[", podemos descobrir facilmente quem é quem."]},{"tag":"br","content":null}]},{"tag":"code","content":[{"tag":"br","content":null},{"tag":"code-text","content":["(@#'mostra-env :parametro1 :parametro2)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; :parametro2"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Pronto. Sabemos agora que toda macro guarda seu código dentro da estrutura de uma função e que essa função sempre vai ter dois argumentos a mais: "]},{"tag":"monospaced","content":[{"tag":"text","content":["&form"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["&env"]}]},{"tag":"text","content":[" respectivamente, como podemos ver ao verificarmos as macros abaixo."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro um-argumento [a] ())"]},{"tag":"br","content":null},{"tag":"code-text","content":["(arg-count @#'um-argumento)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 3"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro dois-argumentos [a b] ())"]},{"tag":"br","content":null},{"tag":"code-text","content":["(arg-count @#'dois-argumentos)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 4"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro tres-argumentos [a b c] ())"]},{"tag":"br","content":null},{"tag":"code-text","content":["(arg-count @#'tres-argumentos)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 5"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro varios-argumentos [& varios] ())"]},{"tag":"br","content":null},{"tag":"code-text","content":["(arg-count @#'varios-argumentos)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 3"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Podemos usar também "]},{"tag":"monospaced","content":[{"tag":"text","content":["macroexpand-1"]}]},{"tag":"text","content":[" para ver o que é o Clojure faz quando criamos uma macro."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(macroexpand-1"]},{"tag":"br","content":null},{"tag":"code-text","content":["  '(defmacro varios-argumentos [& varios]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (println &env)))"]},{"tag":"br","content":null},{"tag":"code-text","content":[";(do"]},{"tag":"br","content":null},{"tag":"code-text","content":[";  (clojure.core/defn varios-argumentos"]},{"tag":"br","content":null},{"tag":"code-text","content":[";    ([&form &env & varios]"]},{"tag":"br","content":null},{"tag":"code-text","content":[";      (println &env)))"]},{"tag":"br","content":null},{"tag":"code-text","content":[";  (. (var varios-argumentos) (setMacro))"]},{"tag":"br","content":null},{"tag":"code-text","content":[";  (var varios-argumentos))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E eis a prova de que o código de uma macro é representado internamente como uma função. O método "]},{"tag":"monospaced","content":[{"tag":"text","content":["setMacro"]}]},{"tag":"text","content":[" adiciona metadado "]},{"tag":"monospaced","content":[{"tag":"text","content":[":macro true"]}]},{"tag":"text","content":[", permitindo ao compilador saber quando executar código em tempo de compilação, no caso de uma macro, e quando executá-lo em tempo de execução, no caso de uma função."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro uma-macro [] nil)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defn uma-funcao [] nil)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(meta #'uma-macro)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; {:ns #<Namespace user>, :name uma-macro, :file \"NO_SOURCE_PATH\","]},{"tag":"br","content":null},{"tag":"code-text","content":["; :column 1, :line 1, :macro true, :arglists ([])}"]},{"tag":"br","content":null},{"tag":"code-text","content":["(meta #'uma-funcao)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; {:ns #<Namespace user>, :name uma-funcao, :file \"NO_SOURCE_PATH\","]},{"tag":"br","content":null},{"tag":"code-text","content":["; :column 1, :line 1, :arglists ([])}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"title","content":[{"tag":"text","content":["A forma &form"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Já o argumento implícito "]},{"tag":"monospaced","content":[{"tag":"text","content":["&form"]}]},{"tag":"text","content":[" nos permite ver a expressão em que a macro foi invocada."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar uma macro chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["mostra-form"]}]},{"tag":"text","content":[" para ver na prática."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro mostra-form []"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println &form))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(mostra-form)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (mostra-form)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Não parece ter muita graça. Vamos reescrever a macro para que ela aceite vários argumentos."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro mostra-form [& args]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println &form))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(mostra-form :um)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (mostra-form :um)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(mostra-form :um :dois)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (mostra-form :um :dois)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(mostra-form :um :dois :tres)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (mostra-form :um :dois :tres)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Como "]},{"tag":"monospaced","content":[{"tag":"text","content":["&form"]}]},{"tag":"text","content":[" nos retorna uma lista, vamos extrair os argumentos."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro mostra-form-args [& args]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (rest &form)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (mostra-form-args 1 2 3)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (1 2 3)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O argumento "]},{"tag":"monospaced","content":[{"tag":"text","content":["&form"]}]},{"tag":"text","content":[" carrega alguns metadados que podem ser úteis se você estiver desenvolvendo alguma ferramenta que analise código Clojure."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defmacro mostra-form-meta [& args]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println (meta &form)))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(mostra-form-meta 1 2 3 4)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; {:line 1, :column 1}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Linha "]},{"tag":"monospaced","content":[{"tag":"text","content":["1"]}]},{"tag":"text","content":[" e coluna "]},{"tag":"monospaced","content":[{"tag":"text","content":["1"]}]},{"tag":"text","content":[" do "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[". Faz sentido."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(let [a 1]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (println a)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (mostra-form-meta))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; {:line 3, :column 1}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora a macro está na linha "]},{"tag":"monospaced","content":[{"tag":"text","content":["3"]}]},{"tag":"text","content":[" do nosso código."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["reader macros"]}]},{"tag":"index","content":[{"tag":"text","content":["read-macros"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Reader macros"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"todo","content":[{"tag":"text","content":["a explicação não ficou legal"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Durante a leitura do código, existem duas tabelas de caracteres que indicam se o que vem a seguir é um tipo específico de dados ou se o comportamento do "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[" deve ser modificado temporariamente. Esses caracteres são chamados "]},{"tag":"italic","content":[{"tag":"text","content":["reader macros"]}]},{"tag":"text","content":[", ou "]},{"tag":"italic","content":[{"tag":"text","content":["read-macros"]}]},{"tag":"text","content":[".."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para entendermos melhor como esse recurso funciona, vamos dar uma olhada mais detalhada no que acontece durante o ciclo de execução do código Clojure, seja dentro do "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[", seja como uma aplicação a parte."]},{"tag":"br","content":null}]},{"tag":"todo","content":[{"tag":"text","content":["criar diagrama"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Enquanto no Java podemos executar código apenas em tempo de execução, no Clojure temos, de maneira bem simplificada, três fases distintas"]},{"tag":"ref-label","content":[{"tag":"text","content":["on-lisp"]}]},{"tag":"text","content":[":"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"bold","content":[{"tag":"text","content":["tempo de leitura"]}]},{"tag":"text","content":[", momento em que o código é lido e interpretado pelo "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[". O código de um "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[" é executadas nesse momento."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"bold","content":[{"tag":"text","content":["tempo de compilação"]}]},{"tag":"text","content":[", momento em que a representação lógica do código gerada pelo "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[" é compilada para "]},{"tag":"italic","content":[{"tag":"text","content":["bytecode"]}]},{"tag":"text","content":[". Macros são expandidas e executadas nessa fase."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"bold","content":[{"tag":"text","content":["tempo de execução"]}]},{"tag":"text","content":[", momento em que o "]},{"tag":"italic","content":[{"tag":"text","content":["bytecode"]}]},{"tag":"text","content":[" gerado pelo compilador é executado."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No "]},{"tag":"italic","content":[{"tag":"text","content":["REPL"]}]},{"tag":"text","content":[", o tempo de leitura representa o "]},{"tag":"italic","content":[{"tag":"text","content":["R"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["read"]}]},{"tag":"text","content":[", enquanto os tempos de compilação e execução representam o "]},{"tag":"italic","content":[{"tag":"text","content":["E"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["evaluate"]}]},{"tag":"text","content":[". O "]},{"tag":"italic","content":[{"tag":"text","content":["P"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["print"]}]},{"tag":"text","content":[", fica no final do tempo de execução."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ao se deparar com um "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[" o "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[" padrão, implementado pela classe "]},{"tag":"monospaced","content":[{"tag":"text","content":["clojure.lang.LispReader"]}]},{"tag":"text","content":[", efetua a leitura do código através de uma função predefinida em uma tabela interna. Essa função trata o trecho seguinte e devolve o controle ao "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[" padrão. Normalmente existe um operador equivalente ao "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[" que pode ser chamado em tempo de execução."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Com esse recurso podemos escrever código mais conciso e simples de ler, ou até mesmo código que não tenha a cara habitual do LISP."]},{"tag":"br","content":null}]},{"tag":"title","content":[{"tag":"text","content":["Os reader macros"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":[";"]}]},{"tag":"text","content":[" - o primeiro deles é o caracter usado para comentários. Você pode utilizar também a macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["comment"]}]},{"tag":"text","content":[" com a vantagem de permitir múltiplas linhas. O problema de usar a macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["comment"]}]},{"tag":"text","content":[" é que você vai receber "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":[" como retorno. Tome cuidado para não deixar que isso atrapalhe o retorno de uma expressão."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["; linha comentada"]},{"tag":"br","content":null},{"tag":"code-text","content":["(comment uma linha"]},{"tag":"br","content":null},{"tag":"code-text","content":["duas linhas"]},{"tag":"br","content":null},{"tag":"code-text","content":["três linhas)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; nil"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":["\\"]}]},{"tag":"text","content":[" - seguido de um caracter retorna seu respectivo valor como um caracter Java. Equivale a utilizar a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["char"]}]},{"tag":"text","content":[" passando o valor numérico do caracter. Um valor "]},{"tag":"italic","content":[{"tag":"text","content":["string"]}]},{"tag":"text","content":[" é tratado pelo Clojure como uma lista de caracteres, mesmo que na realidade não seja. Vimos isso no capítulo "]},{"tag":"ref-label","content":[{"tag":"text","content":["capitulo-dados"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["\\a"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \\a"]},{"tag":"br","content":null},{"tag":"code-text","content":["(char 98)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \\b"]},{"tag":"br","content":null},{"tag":"code-text","content":["(apply list \"batata\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (\\b \\a \\t \\a \\t \\a)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(str \\b \\a \\t \\a \\t \\a)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; batata"]},{"tag":"br","content":null},{"tag":"code-text","content":["(str (char 98) (char 97) (char 116) (char 97) (char 116) (char 97))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \"batata\""]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":["@"]}]},{"tag":"text","content":[" - é o operador "]},{"tag":"italic","content":[{"tag":"text","content":["deref"]}]},{"tag":"text","content":[", usado para ver o valor de um "]},{"tag":"italic","content":[{"tag":"text","content":["atom"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["ref"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["agent"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["delay"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["future"]}]},{"tag":"text","content":[" e "]},{"tag":"italic","content":[{"tag":"text","content":["promise"]}]},{"tag":"text","content":[".Quando utilizado com "]},{"tag":"italic","content":[{"tag":"text","content":["delay"]}]},{"tag":"text","content":[", força a execução caso ainda não tenha acontecido. Com "]},{"tag":"italic","content":[{"tag":"text","content":["future"]}]},{"tag":"text","content":[" ou "]},{"tag":"italic","content":[{"tag":"text","content":["promise"]}]},{"tag":"text","content":[" a "]},{"tag":"italic","content":[{"tag":"text","content":["thread"]}]},{"tag":"text","content":[" ficará bloqueada até que o valor seja retornado ou a computação seja concluída. Se utilizarmos com "]},{"tag":"italic","content":[{"tag":"text","content":["atom"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[" ou "]},{"tag":"italic","content":[{"tag":"text","content":["agent"]}]},{"tag":"text","content":[" teremos o valor mais recente armazenado. Você pode usar a macro "]},{"tag":"monospaced","content":[{"tag":"text","content":["deref"]}]},{"tag":"text","content":[" com "]},{"tag":"italic","content":[{"tag":"text","content":["timeout"]}]},{"tag":"text","content":[", se preferir, para que um valor padrão seja retornado caso a computação demore demais."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def aguarde (delay \"não preciso disso agora\"))"]},{"tag":"br","content":null},{"tag":"code-text","content":["aguarde"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #<Delay@31cc4717: :pending>"]},{"tag":"br","content":null},{"tag":"code-text","content":["@aguarde"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \"não preciso disso agora\""]},{"tag":"br","content":null},{"tag":"code-text","content":["@(var +)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #<core$_PLUS_ clojure.core$_PLUS_@3e79a799>"]},{"tag":"br","content":null},{"tag":"code-text","content":["(def aguarde-2 (promise))"]},{"tag":"br","content":null},{"tag":"code-text","content":["(deref aguarde-2 1000 \"tempo esgotado\")"]},{"tag":"br","content":null},{"tag":"code-text","content":[";; aguarda um segundo"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \"tempo esgotado\""]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":["^"]}]},{"tag":"text","content":[" - indica que estamos atribuindo metadados a um símbolo ou valor."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def ^:batata pure 42)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(meta #'pure)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; {:ns #<Namespace user>, :name pure, :batatas true,"]},{"tag":"br","content":null},{"tag":"code-text","content":["; :file \"NO_SOURCE_PATH\", :column 1, :line 1}"]},{"tag":"br","content":null},{"tag":"code-text","content":["(def ^{:batata true} fritas 42)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(meta #'fritas)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; {:ns #<Namespace user>, :name fritas, :batatas true,"]},{"tag":"br","content":null},{"tag":"code-text","content":["; :file \"NO_SOURCE_PATH\", :column 1, :line 1}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":["`"]}]},{"tag":"text","content":[", "]},{"tag":"monospaced","content":[{"tag":"text","content":["@"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["~@"]}]},{"tag":"text","content":[" - são os operadores para criação de macros que vimos neste capítulo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":["("]}]},{"tag":"text","content":[", "]},{"tag":"monospaced","content":[{"tag":"text","content":["▷"]}]},{"tag":"text","content":[", "]},{"tag":"monospaced","content":[{"tag":"text","content":["{"]}]},{"tag":"text","content":[" - são utilizados para criarmos listas, vetores e mapas, respectivamente."]},{"tag":"br","content":null}]},{"tag":"title","content":[{"tag":"text","content":["Dispatch macro"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O "]},{"tag":"italic","content":[{"tag":"text","content":["dispatch macro"]}]},{"tag":"text","content":[" é um tipo especial de "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[" que delega a responsabilidade do "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[" para uma função definida em uma tabela chamada internamente de "]},{"tag":"italic","content":[{"tag":"text","content":["dispatchMacros"]}]},{"tag":"text","content":[". Essa informação vai ser relevante mais para frente."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O "]},{"tag":"italic","content":[{"tag":"text","content":["dispatch macro"]}]},{"tag":"text","content":[" é representado pelo caracter "]},{"tag":"monospaced","content":[{"tag":"text","content":["#"]}]},{"tag":"text","content":[". Isso significa que qualquer combinação que você use iniciada por "]},{"tag":"monospaced","content":[{"tag":"text","content":["#"]}]},{"tag":"text","content":[" executará a função correpondente na tabela "]},{"tag":"italic","content":[{"tag":"text","content":["dispatchMacros"]}]},{"tag":"text","content":[" ou vai causar um erro."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":[";; a combinação #* não existe"]},{"tag":"br","content":null},{"tag":"code-text","content":["#* a"]},{"tag":"br","content":null},{"tag":"code-text","content":["; RuntimeException No reader function for tag *"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Por que, afinal, criar um "]},{"tag":"italic","content":[{"tag":"text","content":["dispatch macro"]}]},{"tag":"text","content":[" quando se tem o alfabeto inteiro para utilizar como "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":["?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O primeiro motivo é que não temos o alfabeto inteiro. Se, por exemplo, utilizarmos "]},{"tag":"monospaced","content":[{"tag":"text","content":["A"]}]},{"tag":"text","content":[" como um "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[" para funções anônimas, não poderíamos ter mais nenhum símbolo que comece com "]},{"tag":"monospaced","content":[{"tag":"text","content":["A"]}]},{"tag":"text","content":[" maiúsculo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O segundo motivo é que, usando "]},{"tag":"monospaced","content":[{"tag":"text","content":["A"]}]},{"tag":"text","content":[" para definir uma função anônima seria bem ruim de ler."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":[";; ilegível, certo?"]},{"tag":"br","content":null},{"tag":"code-text","content":["(map A* % %A (range 1 11))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Então o "]},{"tag":"italic","content":[{"tag":"text","content":["dispatch macro"]}]},{"tag":"text","content":[" se torna um ponto de expansão da linguagem, permitindo inclusive a utilização de sintaxes diferentes de "]},{"tag":"italic","content":[{"tag":"text","content":["S-Expressions"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Os "]},{"tag":"italic","content":[{"tag":"text","content":["reader macros"]}]},{"tag":"text","content":[" que fazem uso de "]},{"tag":"italic","content":[{"tag":"text","content":["dispatch macro"]}]},{"tag":"text","content":[" são:"]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["#'"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":["#'"]}]},{"tag":"text","content":[" - é utilizado para referenciarmos "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[". É equivalente à forma especial "]},{"tag":"monospaced","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[". Note que fazer referência ao "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[" não retorna o valor associado a ele. Para isso devemos usar o operador "]},{"tag":"monospaced","content":[{"tag":"text","content":["@"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def vaca :muuuuuu)"]},{"tag":"br","content":null},{"tag":"code-text","content":["#'vaca"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #'user/vaca"]},{"tag":"br","content":null},{"tag":"code-text","content":["(var vaca)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #'user/vaca"]},{"tag":"br","content":null},{"tag":"code-text","content":["@#'vaca"]},{"tag":"br","content":null},{"tag":"code-text","content":["; :muuuuuu"]},{"tag":"br","content":null},{"tag":"code-text","content":["(deref (var vaca))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; :muuuuuu"]},{"tag":"br","content":null},{"tag":"code-text","content":["vaca"]},{"tag":"br","content":null},{"tag":"code-text","content":["; :muuuuuu"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["java.util.regex.Pattern"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["#\""]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":["#\""]}]},{"tag":"text","content":[" - é utilizado quando queremos trabalhar com expressões regulares. Por baixo dos panos cria um objeto do tipo "]},{"tag":"monospaced","content":[{"tag":"text","content":["java.util.regex.Pattern"]}]},{"tag":"text","content":[", permitindo a utilização de todas as funcionalidades que o Java traz nativamente para manipular expressões regulares."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(def telefone #\"\\w{3}[-. ]\\w{3}[-. ]\\w{3}\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["(re-matches telefone \"abcdef\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["; nil"]},{"tag":"br","content":null},{"tag":"code-text","content":["(re-matches telefone \"987.654.321\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \"987.654.321\""]},{"tag":"br","content":null},{"tag":"code-text","content":["(re-matches telefone \"987-654-321\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \"987-654-321\""]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":["#("]}]},{"tag":"text","content":[" - com "]},{"tag":"monospaced","content":[{"tag":"text","content":["#("]}]},{"tag":"text","content":[" nós criamos funções anônimas de forma mais concisa, sem a necessidade de declarar a lista de argumentos. Quando lidamos com apenas um parâmetro utilizamos o caracter "]},{"tag":"monospaced","content":[{"tag":"text","content":["%"]}]},{"tag":"text","content":[", e quando lidamos com mais de um usamos a versão numerada, de acordo com a ordem do parâmetro."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(map #(* % %) (range 1 6))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (1 4 9 16 25)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(map (fn [x] (* x x)) (range 1 6))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (1 4 9 16 25)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(#(* %1 %2 %3 %4) 2 3 4 5)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 120"]},{"tag":"br","content":null},{"tag":"code-text","content":["((fn [a b c d] (* a b c d)) 2 3 4 5)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 120"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":["#{"]}]},{"tag":"text","content":[" - é utilizado para a criação de "]},{"tag":"italic","content":[{"tag":"text","content":["sets"]}]},{"tag":"text","content":[", que são coleções de dados que não se repetem. Podemos também utilizar a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["set"]}]},{"tag":"text","content":[" para o mesmo fim."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["#{:a :b :c :c :d :d}"]},{"tag":"br","content":null},{"tag":"code-text","content":["; IllegalArgumentException Duplicate key: :c"]},{"tag":"br","content":null},{"tag":"code-text","content":["(def vogal? #{\\a \\e \\i \\o \\u})"]},{"tag":"br","content":null},{"tag":"code-text","content":["(vogal? \\a)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; \\a"]},{"tag":"br","content":null},{"tag":"code-text","content":["(vogal? \\b)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; nil"]},{"tag":"br","content":null},{"tag":"code-text","content":["(set \"batata\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #{\\a \\b \\t}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["- "]},{"tag":"monospaced","content":[{"tag":"text","content":["#_"]}]},{"tag":"text","content":[" - diz ao "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[" que a próxima expressão deve ser descartada. Enquanto o "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[" de comentário ignora toda a linha, esse "]},{"tag":"italic","content":[{"tag":"text","content":["macro reader"]}]},{"tag":"text","content":[" ignora uma expressão completa, que pode ocupar várias linhas ou apenas um símbolo. É um recurso bem útil durante o desenvolvimento, quando você precisa ignorar uma expressão completa, já que é mais simples do que comentar inúmeras linhas."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(+ 1 2 3 #_ 4) ; descarta o 4"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 6"]},{"tag":"br","content":null},{"tag":"code-text","content":["(+ 1 2 #_ 3 4) ; descarta o 3"]},{"tag":"br","content":null},{"tag":"code-text","content":["; 7"]},{"tag":"br","content":null},{"tag":"code-text","content":["(map"]},{"tag":"br","content":null},{"tag":"code-text","content":["  #_ (fn [x] (* 2 x)) odd? ; descarta '(fn ...)'' e deixa 'odd?'"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (range 2 7))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; (false true false true false)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"todo","content":[{"tag":"text","content":["se der tempo, falar sobre tagged literals e data-readers"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Criando reader macros"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Por padrão, o Clojure não permite a criação de "]},{"tag":"italic","content":[{"tag":"text","content":["reader macros"]}]},{"tag":"text","content":[" além daquelas que já vêm com a linguagem. Para quem vem do Common Lisp esse é um dos pontos que causa a maior estranheza. Já para quem vem do Java, Ruby ou outras linguagens mais conhecidas, isso não muda muita coisa. De acordo com o criador da linguagem, não existe previsão ou intenção de implementar esse recurso na linguagem"]},{"tag":"ref","content":[{"tag":"text","content":["clojure-reader-macro"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Um dos problemas que isso pode trazer é a possibilidade de duas bibliotecas definirem o mesmo "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[" para coisas diferentes. Apenas o que foi declarado em uma das bibliotecas vai funcionar, trazendo comportamentos totalmente imprevistos para a outra. Já macros normais podem ter o mesmo nome em bibliotecas diferentes, uma vez que ambas estariam separadas em seus próprios "]},{"tag":"italic","content":[{"tag":"text","content":["namespaces"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ou, nas palavras do pai da criança:"]},{"tag":"br","content":null}]},{"tag":"quote","content":[{"tag":"text","content":["\"Conforme o tempo passa eu me torno mais inflexível na minha decisão de não suportar reader macros. (...) Enquanto reader macros tornam a linguagem ainda mais poderosa, elas têm como preço a falta de interoperabilidade, muito mais do que macros comuns, que podem ser colocadas em namespaces\""]},{"tag":"text","content":["  -- Rich Hickey, criador do Clojure"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Porém, Clojure é uma linguagem flexível num nível muito além do que você imagina. Por mais que a linguagem não disponibilize uma forma de criarmos nossos próprios "]},{"tag":"italic","content":[{"tag":"text","content":["reader macros"]}]},{"tag":"text","content":[", podemos alterá-la para adicionar os recursos que desejarmos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Deixo claro, como um aviso, de que esse recurso não deve ser utilizado em produção. Estou demonstrando aqui para que você possa entender melhor como a linguagem funciona por dentro, como podemos estendê-la e também porque a curiosidade nos move e nos desafia."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Este seria um livro muito chato se eu me limitasse a apresentar o feijão-com-arroz da linguagem, certo?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos por a mão na massa então."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Anteriormente eu havia dito que existe uma tabela interna chamada "]},{"tag":"italic","content":[{"tag":"text","content":["dispatchMacros"]}]},{"tag":"text","content":[", contendo as funções que serão executadas ao utilizarmos o "]},{"tag":"italic","content":[{"tag":"text","content":["dispatch macro"]}]},{"tag":"text","content":[". Essa tabela nada mais é do que um "]},{"tag":"italic","content":[{"tag":"text","content":["array"]}]},{"tag":"text","content":[" de objetos que implementam "]},{"tag":"monospaced","content":[{"tag":"text","content":["clojure.lang.IFn"]}]},{"tag":"text","content":[" e, apesar de não ser um membro público de "]},{"tag":"monospaced","content":[{"tag":"text","content":["clojure.lang.LispReader"]}]},{"tag":"text","content":[", podemos fazer uso de "]},{"tag":"italic","content":[{"tag":"text","content":["reflection"]}]},{"tag":"text","content":[" para acessá-lo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Primeiro vamos acessar o campo "]},{"tag":"monospaced","content":[{"tag":"text","content":["dispatchMacros"]}]},{"tag":"text","content":[" da classe "]},{"tag":"monospaced","content":[{"tag":"text","content":["clojure.lang.LispReader"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(.getDeclaredField clojure.lang.LispReader \"dispatchMacros\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #<Field static clojure.lang.IFn[]"]},{"tag":"br","content":null},{"tag":"code-text","content":["; clojure.lang.LispReader.dispatchMacros>"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["java.lang.reflect.Field"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O método "]},{"tag":"monospaced","content":[{"tag":"text","content":["getDeclaredField"]}]},{"tag":"text","content":[" nos retorna um objeto do tipo "]},{"tag":"monospaced","content":[{"tag":"text","content":["Field"]}]},{"tag":"text","content":[". Vale lembrar que esse objeto não é imutável, como estamos habituados no Clojure."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos então permitir que o campo seja acessado de fora da classe, mesmo não sendo público. Para isso vamos usar o método "]},{"tag":"monospaced","content":[{"tag":"text","content":["setAccessible"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(let [dispatch-macros (.getDeclaredField"]},{"tag":"br","content":null},{"tag":"code-text","content":["                         clojure.lang.LispReader"]},{"tag":"br","content":null},{"tag":"code-text","content":["                         \"dispatchMacros\")]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (.setAccessible dispatch-macros true))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; nil"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["void"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O método "]},{"tag":"monospaced","content":[{"tag":"text","content":["setAccessible"]}]},{"tag":"text","content":[" tem o tipo "]},{"tag":"monospaced","content":[{"tag":"text","content":["void"]}]},{"tag":"text","content":[", o que no Clojure equivale a retornar "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para retornarmos o valor desse campo vamos utilizar o método "]},{"tag":"monospaced","content":[{"tag":"text","content":["get"]}]},{"tag":"text","content":[", passando "]},{"tag":"monospaced","content":[{"tag":"text","content":["nil"]}]},{"tag":"text","content":[" como parâmetro."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(let [dispatch-macros"]},{"tag":"br","content":null},{"tag":"code-text","content":["      (.getDeclaredField clojure.lang.LispReader \"dispatchMacros\")]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (.setAccessible dispatch-macros true)"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (.get dispatch-macros nil))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #<IFn[] [Lclojure.lang.IFn;@37272973>"]},{"tag":"br","content":null},{"tag":"code-text","content":["; ]"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["clojure.lang.IFn"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora temos um "]},{"tag":"italic","content":[{"tag":"text","content":["array"]}]},{"tag":"text","content":[" de objetos do tipo "]},{"tag":"monospaced","content":[{"tag":"text","content":["IFn"]}]},{"tag":"text","content":[", que é exatamente o que estávamos esperando."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Esse "]},{"tag":"italic","content":[{"tag":"text","content":["array"]}]},{"tag":"text","content":[" tem 256 posições, sendo uma para cada caracter da "]},{"tag":"italic","content":[{"tag":"text","content":["tabela ASCII"]}]},{"tag":"text","content":[". Dessa forma, o caracter "]},{"tag":"monospaced","content":[{"tag":"text","content":["#"]}]},{"tag":"text","content":[" fica na posição 35, que é o seu valor na tal tabela."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["int"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para sabermos o valor numérico do caracter, temos que convertê-lo para um inteiro Java usando a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["int"]}]},{"tag":"text","content":[". Perceba que estamos interessados no valor "]},{"tag":"monospaced","content":[{"tag":"text","content":["int"]}]},{"tag":"text","content":[" primitivo do Java, e não na classe "]},{"tag":"monospaced","content":[{"tag":"text","content":["Integer"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos testar o que acontece se acessarmos a posição do caracter "]},{"tag":"monospaced","content":[{"tag":"text","content":["'"]}]},{"tag":"text","content":[". Dessa forma vamos ver que função é executada quando utilizamos o "]},{"tag":"italic","content":[{"tag":"text","content":["macro reader"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["#'"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["aget"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para acessar uma posição de um "]},{"tag":"italic","content":[{"tag":"text","content":["array"]}]},{"tag":"text","content":[" Java devemos usar a função "]},{"tag":"monospaced","content":[{"tag":"text","content":["aget"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(aget"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (let [dispatch-macros"]},{"tag":"br","content":null},{"tag":"code-text","content":["        (.getDeclaredField clojure.lang.LispReader \"dispatchMacros\")]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (.setAccessible dispatch-macros true)"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (.get dispatch-macros nil))"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (int \\'))"]},{"tag":"br","content":null},{"tag":"code-text","content":["; #<VarReader clojure.lang.LispReader$VarReader@10be441>"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E eis que temos um objeto do tipo "]},{"tag":"monospaced","content":[{"tag":"text","content":["VarReader"]}]},{"tag":"text","content":[". Sabendo que "]},{"tag":"monospaced","content":[{"tag":"text","content":["#'"]}]},{"tag":"text","content":[" é exatamente a forma de retornarmos um "]},{"tag":"italic","content":[{"tag":"text","content":["var"]}]},{"tag":"text","content":[", temos certeza de que estamos no caminho certo."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["aset"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar uma função chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["dispatch-reader-macro"]}]},{"tag":"text","content":[" que recebe dois parâmetros: o caracter que será usado com o "]},{"tag":"italic","content":[{"tag":"text","content":["dispatch macro"]}]},{"tag":"text","content":[" e a função que vai tratar o conteúdo. O que muda em relação ao nosso último código é que vamos utilizar "]},{"tag":"monospaced","content":[{"tag":"text","content":["aset"]}]},{"tag":"text","content":[" para modificar o valor de uma posição do "]},{"tag":"italic","content":[{"tag":"text","content":["array"]}]},{"tag":"text","content":[" e vamos substituir o caracter "]},{"tag":"monospaced","content":[{"tag":"text","content":["'"]}]},{"tag":"text","content":[" pelo caracter que for passado como parâmetro."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn dispatch-reader-macro [character function]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (aset"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (let [dispatch-macros (.getDeclaredField"]},{"tag":"br","content":null},{"tag":"code-text","content":["                             clojure.lang.LispReader"]},{"tag":"br","content":null},{"tag":"code-text","content":["                             \"dispatchMacros\")]"]},{"tag":"br","content":null},{"tag":"code-text","content":["      (.setAccessible dispatch-macros true)"]},{"tag":"br","content":null},{"tag":"code-text","content":["      (.get dispatch-macros nil))"]},{"tag":"br","content":null},{"tag":"code-text","content":["    (int character)"]},{"tag":"br","content":null},{"tag":"code-text","content":["    function))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A função que passarmos no argumento "]},{"tag":"monospaced","content":[{"tag":"text","content":["function"]}]},{"tag":"text","content":[" vai receber dois parâmetros. O primeiro é uma referência ao próprio "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[" e o segundo contém o "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[" que utilizamos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar um "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[" que recebe um XML e nos retorna um mapa. Ao invés de reinventarmos a roda, vamos utilizar a própria biblioteca "]},{"tag":"monospaced","content":[{"tag":"text","content":["clojure.xml"]}]},{"tag":"text","content":[", que já vem com o Clojure."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A biblioteca "]},{"tag":"monospaced","content":[{"tag":"text","content":["xml.reader"]}]},{"tag":"text","content":[" tem uma função "]},{"tag":"monospaced","content":[{"tag":"text","content":["parse"]}]},{"tag":"text","content":[" que não lida diretamente com textos, mas aceita que usemos um "]},{"tag":"monospaced","content":[{"tag":"text","content":["InputStream"]}]},{"tag":"text","content":[". Para passarmos um texto como "]},{"tag":"monospaced","content":[{"tag":"text","content":["InputStream"]}]},{"tag":"text","content":[" podemos usar a classe "]},{"tag":"monospaced","content":[{"tag":"text","content":["java.io.ByteArrayInputStream"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar uma lista de compras em formato XML para vê-la funcionando."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(require '[clojure.xml :as xml])"]},{"tag":"br","content":null},{"tag":"code-text","content":["(def xml \"<compras><item><batata><preco>1.23</preco></batata>"]},{"tag":"br","content":null},{"tag":"code-text","content":["</item></compras>\")"]},{"tag":"br","content":null},{"tag":"code-text","content":["(let [bytes  (.getBytes xml)"]},{"tag":"br","content":null},{"tag":"code-text","content":["      bis    (java.io.ByteArrayInputStream. bytes)"]},{"tag":"br","content":null},{"tag":"code-text","content":["      result (xml/parse bis)]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  result)"]},{"tag":"br","content":null},{"tag":"code-text","content":["; {:tag :compras, :attrs nil, :content [{:tag :item, :attrs nil,"]},{"tag":"br","content":null},{"tag":"code-text","content":["; :content [{:tag :batata, :attrs nil, :content [{:tag :preco,"]},{"tag":"br","content":null},{"tag":"code-text","content":["; :attrs nil, :content [\"1.23\"]}]}]}]}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Temos nosso XML convertido para um mapa. Vamos fazer então com que o Clojure extraia esse texto do código fonte. Para isso vou utilizar a classe "]},{"tag":"monospaced","content":[{"tag":"text","content":["StringReader"]}]},{"tag":"text","content":[", que é o que o "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[" usa para ler dados do tipo "]},{"tag":"italic","content":[{"tag":"text","content":["string"]}]},{"tag":"text","content":[". Ao invés de perder tempo inventando coisas possivelmente com "]},{"tag":"italic","content":[{"tag":"text","content":["bugs"]}]},{"tag":"text","content":[", vamos utilizar o que a própria linguagem nos oferece."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos criar uma função chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["xml-reader"]}]},{"tag":"text","content":[", que usaremos em seguida na definição do "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[". Ela recebe como parâmetros o "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[" do Clojure e o caracter que foi utilizado com o "]},{"tag":"italic","content":[{"tag":"text","content":["dispatch macro"]}]},{"tag":"text","content":[". Nela vamos utilizar "]},{"tag":"monospaced","content":[{"tag":"text","content":["StringReader"]}]},{"tag":"text","content":[" e o nosso código para tratar o XML dentro do texto."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(require '[clojure.xml :as xml])"]},{"tag":"br","content":null},{"tag":"code-text","content":["(defn xml-reader [reader character]"]},{"tag":"br","content":null},{"tag":"code-text","content":["  (let [chr (.read reader)"]},{"tag":"br","content":null},{"tag":"code-text","content":["        string-reader (clojure.lang.LispReader$StringReader.)"]},{"tag":"br","content":null},{"tag":"code-text","content":["        string (.invoke"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  string-reader"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  reader"]},{"tag":"br","content":null},{"tag":"code-text","content":["                  chr)"]},{"tag":"br","content":null},{"tag":"code-text","content":["        bytes  (.getBytes string)"]},{"tag":"br","content":null},{"tag":"code-text","content":["        bis    (java.io.ByteArrayInputStream. bytes)"]},{"tag":"br","content":null},{"tag":"code-text","content":["        result (xml/parse bis)]"]},{"tag":"br","content":null},{"tag":"code-text","content":["    result))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos definir o "]},{"tag":"italic","content":[{"tag":"text","content":["reader macro"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["#X"]}]},{"tag":"text","content":[" como o leitor de XML:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(dispatch-reader-macro \\X xml-reader)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos utilizar aquele mesmo XML da lista de compras com nosso "]},{"tag":"italic","content":[{"tag":"text","content":["macro reader"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["#X\""]},{"tag":"br","content":null},{"tag":"code-text","content":["  <compras>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    <item>"]},{"tag":"br","content":null},{"tag":"code-text","content":["      <batata>"]},{"tag":"br","content":null},{"tag":"code-text","content":["        <preco>1.23</preco>"]},{"tag":"br","content":null},{"tag":"code-text","content":["      </batata>"]},{"tag":"br","content":null},{"tag":"code-text","content":["    </item>"]},{"tag":"br","content":null},{"tag":"code-text","content":["  </compras>\""]},{"tag":"br","content":null},{"tag":"code-text","content":["; {:tag :compras, :attrs nil, :content [{:tag :item, :attrs nil,"]},{"tag":"br","content":null},{"tag":"code-text","content":["; :content [{:tag :batata, :attrs nil, :content [{:tag :preco,"]},{"tag":"br","content":null},{"tag":"code-text","content":["; :attrs nil, :content [\"1.23\"]}]}]}]}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E eis que alteramos o "]},{"tag":"italic","content":[{"tag":"text","content":["reader"]}]},{"tag":"text","content":[" do Clojure com um pouco de "]},{"tag":"italic","content":[{"tag":"text","content":["reflection"]}]},{"tag":"text","content":[" e curiosidade."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Onde aprender mais"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Macros formam um assunto muito vasto e com muitos detalhes. Os fundamentos são simples, aprendemos poucos operadores e um pouco de prática vai ajudar bastante."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No capítulo "]},{"tag":"ref-label","content":[{"tag":"text","content":["capitulo-mais"]}]},{"tag":"text","content":[" eu indico alguns livros para que você domine totalmente o assunto, caso seja de seu interesse."]}]}]}