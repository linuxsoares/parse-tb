{"tag":"document","content":[{"tag":"chapter","content":[{"tag":"text","content":[" Uma introdução gentil ao Clojure"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"label","content":[{"tag":"text","content":["capitulo-introducao-clojure"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"quote","content":[{"tag":"text","content":["\"Qualquer pessoa pode aprender LISP em um dia, exceto os que aprenderam FORTRAN. Esses demorarão três dias.\""]},{"tag":"text","content":["  -- Marvin Minsky"]},{"tag":"ref","content":[{"tag":"text","content":["bio-marvin-minsky"]}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["O que é Clojure?"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["CLR"]}]},{"tag":"index","content":[{"tag":"text","content":["JVM"]}]},{"tag":"index","content":[{"tag":"text","content":["Hickey, Rich"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A linguagem Clojure foi criada por Rich Hickey e lançada em 2007, focando o desenvolvimento na JVM, mas hoje em dia é possível executar a linguagem sobre a CLR (a máquina virtual do .NET) e mesmo sobre alguma "]},{"tag":"italic","content":[{"tag":"text","content":["engine"]}]},{"tag":"text","content":[" JavaScript, como o V8, que é a base do "]},{"tag":"italic","content":[{"tag":"text","content":["Node.js"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["concorrência"]}]},{"tag":"index","content":[{"tag":"text","content":["multithreading"]}]},{"tag":"index","content":[{"tag":"text","content":["programação funcional"]}]},{"tag":"index","content":[{"tag":"text","content":["JavaScript"]}]},{"tag":"index","content":[{"tag":"text","content":["Scala"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["É uma linguagem funcional, como o JavaScript e o Scala, e foi pensada para facilitar o desenvolvimento de aplicações que dependam de concorrência de processos e "]},{"tag":"italic","content":[{"tag":"text","content":["multithreading"]}]},{"tag":"ref","content":[{"tag":"text","content":["clojure-rationale"]}]},{"tag":"text","content":[", o que não significa que não possa ser usada para criar outras aplicações que não dependam disso. Sistemas concorrentes que podem ser bem difíceis de desenvolver com Java acabam se tornando mais simples e concisos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["É também um dialeto LISP"]},{"tag":"ref","content":[{"tag":"text","content":["history-lisp"]}]},{"tag":"text","content":[", mas com mudanças interessantes na forma de apresentar a linguagem, o que elimina uma porção de parênteses"]},{"tag":"ref","content":[{"tag":"text","content":["lisp-differences"]}]},{"tag":"text","content":[" quando comparamos códigos equivalentes escritos em Common Lisp ou Scheme, que são os dois dialetos LISP historicamente mais conhecidos."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Configurando o ambiente"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No decorrer do livro, vamos escrever código o tempo todo e é importante que você já tenha o ambiente instalado antes mesmo de inserir sua primeira instrução."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A primeira coisa que precisamos nos certificar é que você tenha o JDK instalado em sua máquina. Ele pode ser baixado no seguinte link:"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["http://www.oracle.com/technetwork/java/javase/downloads/index.html"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Verifique se a versão instalada do Java é a 1.6 ou mais recente. As versões mais recentes do Clojure não funcionam com versões mais antigas do Java."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Digite "]},{"tag":"monospaced","content":[{"tag":"text","content":["java -version"]}]},{"tag":"text","content":[" em seu Prompt de Comandos ou Terminal para verificar se você está com a máquina virtual instalada e qual sua respectiva versão."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Após termos o JDK funcionando, vamos instalar uma ferramenta chamada "]},{"tag":"italic","content":[{"tag":"text","content":["Leiningen"]}]},{"tag":"text","content":[", que vai ser nosso grande companheiro mesmo depois que você terminar o livro. "]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O "]},{"tag":"italic","content":[{"tag":"text","content":["Leiningen"]}]},{"tag":"text","content":[" automatiza uma série de tarefas, gerencia dependências, agiliza a execução de testes, compilação e pode ser estendido com o uso de plugins. Existem plugins para praticamente todas as tarefas comuns que você precise executar ao desenvolver com Clojure. Para quem está vindo do Java, podemos entender o Leiningen como um primo turbinado do "]},{"tag":"italic","content":[{"tag":"text","content":["Maven"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Acesse http://leiningen.org/#install e leia as instruções para instalação do script. Em seguida, execute o comando "]},{"tag":"italic","content":[{"tag":"text","content":["lein -v"]}]},{"tag":"text","content":[" para verificar a versão atual e baixar as dependências que serão usadas inicialmente."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Durante a escrita desse livro, o Leiningen estava em sua versão "]},{"tag":"monospaced","content":[{"tag":"text","content":["2.5.1"]}]},{"tag":"text","content":[", mas não se preocupe se a sua versão for mais recente enquanto você estiver lendo o livro."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Execute "]},{"tag":"monospaced","content":[{"tag":"text","content":["lein"]}]},{"tag":"text","content":[" sem nenhum parâmetro para ver as opções de uso do Leiningen. Voltaremos a elas assim que explicarmos a sintaxe da linguagem."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Explicando a sintaxe"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["É bem provável que você se assuste na primeira vez que ver um código Clojure, mas fique tranquilo, pois existe uma lógica muito simples por trás dessa cara diferentona."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["É comum pensar num primeiro momento que o Clojure é invertido em relação às outras linguagens por conta da ordem em que as expressões são escritas, mas você vai acabar percebendo que, na verdade, a linguagem é consistente até demais se olharmos em perspectiva."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Relembrando das aulas de matemática, nós expressamos funções dessa forma:"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["y = f(x)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para calcular o dobro, teríamos "]},{"tag":"monospaced","content":[{"tag":"text","content":["y = f(x) = x * 2"]}]},{"tag":"text","content":[", ou "]},{"tag":"monospaced","content":[{"tag":"text","content":["y = x * 2"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para calcularmos o dobro de um número, onde internamente calcularíamos o valor de um parâmetro "]},{"tag":"monospaced","content":[{"tag":"text","content":["x"]}]},{"tag":"text","content":[" multiplicado por "]},{"tag":"italic","content":[{"tag":"text","content":["2"]}]},{"tag":"text","content":[", teríamos:"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["y = dobro(21)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["notação prefixa"]}]},{"tag":"index","content":[{"tag":"text","content":["operador"]}]},{"tag":"index","content":[{"tag":"text","content":["operando"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Note que estamos usando uma notação diferente: primeiro vem o "]},{"tag":"italic","content":[{"tag":"text","content":["operador"]}]},{"tag":"text","content":[" "]},{"tag":"monospaced","content":[{"tag":"text","content":["dobro"]}]},{"tag":"text","content":[" e, em seguida, vem o "]},{"tag":"italic","content":[{"tag":"text","content":["operando"]}]},{"tag":"text","content":[", ou parâmetro, "]},{"tag":"italic","content":[{"tag":"text","content":["21"]}]},{"tag":"text","content":[". Chamamos isso de "]},{"tag":"italic","content":[{"tag":"text","content":["notação prefixa"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["Notação prefixa, ou simbólica"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A notação prefixa utilizada no Clojure, e em qualquer outro LISP, é conhecida também como "]},{"tag":"italic","content":[{"tag":"text","content":["S-Expression"]}]},{"tag":"text","content":[". Esse nome vem do termo "]},{"tag":"italic","content":[{"tag":"text","content":["Symbolic Expression"]}]},{"tag":"text","content":[", ou expressão simbólica, onde uma lista contendo outras listas pode ser representada internamente como uma árvore."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["O termo foi utilizado pela primeira vez por John McCarthy, o criador do "]},{"tag":"italic","content":[{"tag":"text","content":["LISP"]}]},{"tag":"ref","content":[{"tag":"text","content":["lisp-1"]}]},{"tag":"text","content":[". Antes das "]},{"tag":"italic","content":[{"tag":"text","content":["S-Expressions"]}]},{"tag":"text","content":[", McCarthy tinha trabalhado com a ideia de "]},{"tag":"italic","content":[{"tag":"text","content":["M-Expressions"]}]},{"tag":"text","content":[", ou "]},{"tag":"italic","content":[{"tag":"text","content":["meta-expressions"]}]},{"tag":"text","content":[", mas a ideia foi descartada"]},{"tag":"ref","content":[{"tag":"text","content":["history-lisp"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Já para executar um cálculo aritmético, usamos a forma abaixo:"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["y = 21 * 2"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["notação infixa"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Primeiro temos um operando "]},{"tag":"italic","content":[{"tag":"text","content":["21"]}]},{"tag":"text","content":[", depois temos um operador responsável pela multiplicação e, finalmente, o segundo operando "]},{"tag":"italic","content":[{"tag":"text","content":["2"]}]},{"tag":"text","content":[". Chamamos essa forma de "]},{"tag":"italic","content":[{"tag":"text","content":["notação infixa"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["Se você veio do Ruby..."]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["Ruby"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Se você é um desenvolvedor Ruby, ignore esta última expressão."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No Ruby, o cálculo acima utiliza internamente a notação prefixa onde "]},{"tag":"italic","content":[{"tag":"text","content":["21"]}]},{"tag":"text","content":[" é um objeto, "]},{"tag":"monospaced","content":[{"tag":"text","content":["*"]}]},{"tag":"text","content":[" é um método (ou uma mensagem, se preferir) e "]},{"tag":"italic","content":[{"tag":"text","content":["2"]}]},{"tag":"text","content":[" é um parâmetro."]},{"tag":"br","content":null}]},{"tag":"code","content":["ruby",{"tag":"br","content":null},{"tag":"code-text","content":["x = 21 * 2"]},{"tag":"br","content":null},{"tag":"code-text","content":["y = 21.*(2)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["As duas formas são válidas e equivalentes, apesar da segunda ser mais difícil de ler."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["A coisa fica bagunçada quando misturamos as duas formas:"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["y = dobro(7 * 3)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Na expressão acima misturamos notação prefixa com infixa. Não há problema algum com isso, mas não é um bom exemplo de consistência."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Quando falamos em Clojure, ou qualquer outra forma de LISP, o primeiro item de uma lista é um operador e todos os demais são operandos."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["função"]}]},{"tag":"index","content":[{"tag":"text","content":["macros"]}]},{"tag":"index","content":[{"tag":"text","content":["forma especial"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Todo operador é uma "]},{"tag":"italic","content":[{"tag":"text","content":["função"]}]},{"tag":"text","content":[", "]},{"tag":"italic","content":[{"tag":"text","content":["macro"]}]},{"tag":"text","content":[" ou "]},{"tag":"italic","content":[{"tag":"text","content":["forma especial"]}]},{"tag":"text","content":[", inclusive os operadores matemáticos. Não se preocupe em entender agora o que são macros ou formas especiais. "]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Todo os itens do resto da lista são considerados valores, parâmetros ou operandos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Imagine agora que o símbolo + é uma função. Para calcularmos uma soma usaríamos o seguinte código:"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["+(1, 2)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Movendo os parênteses e removendo as vírgulas, a nossa soma inicial ficaria:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(+ 1 2)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["Molhando os dedos"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos usar uma ferramenta muito importante do Clojure chamada REPL. Não se preocupe agora em saber o que significa, pois teremos um capítulo todo só para isso."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No Terminal do seu sistema operacional, execute o comando "]},{"tag":"monospaced","content":[{"tag":"text","content":["lein repl"]}]},{"tag":"text","content":[" para carregar o REPL do Clojure. Se for a primeira vez que você o abre, algumas dependências ainda serão baixadas para o seu computador."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Digite a instrução "]},{"tag":"monospaced","content":[{"tag":"text","content":["(+ 1 2)"]}]},{"tag":"text","content":[" e pressione ENTER. A linha de baixo trará o resultado, "]},{"tag":"italic","content":[{"tag":"text","content":["3"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Parabéns, você acabou de escrever seu primeiro código em Clojure e nós ainda nem começamos a aprender a linguagem."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Use o REPL para acompanhar os exemplos desse livro enquanto for lendo, digitando e vendo os resultados conforme você aprende."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Quando quiser sair do REPL, digite "]},{"tag":"monospaced","content":[{"tag":"text","content":["exit"]}]},{"tag":"text","content":[" e pressione ENTER."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Sabemos que "]},{"tag":"monospaced","content":[{"tag":"text","content":["dobro"]}]},{"tag":"text","content":[" também é uma função. Para calcular "]},{"tag":"monospaced","content":[{"tag":"text","content":["dobro"]}]},{"tag":"text","content":[", usaríamos:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(dobro 21)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Percebam que agora temos uma regra que se aplica a todos os casos. Repetindo a expressão acima que mistura as notações infixa e prefixa usando as regras do LISP, teríamos:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(dobro (* 7 3))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"box","content":[{"tag":"text","content":["Testando 'dobro'"]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Para que possamos testar todos os exemplos desse capítulo, precisamos criar uma função chamada "]},{"tag":"monospaced","content":[{"tag":"text","content":["dobro"]}]},{"tag":"text","content":[", que recebe um parâmetro "]},{"tag":"monospaced","content":[{"tag":"text","content":["x"]}]},{"tag":"text","content":[" e devolve seu valor multiplicado por dois."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Em Clojure, criamos uma função "]},{"tag":"monospaced","content":[{"tag":"text","content":["dobro"]}]},{"tag":"text","content":[" da seguinte forma:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(defn dobro [x] "]},{"tag":"br","content":null},{"tag":"code-text","content":["  (* x 2))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos abrir o REPL e digitar as linhas abaixo:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(dobro 21)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(dobro (* 7 3))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Em ambos os casos, você obterá o número "]},{"tag":"italic","content":[{"tag":"text","content":["42"]}]},{"tag":"text","content":[" como resposta."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Ah, e comemore: você acabou de escrever sua primeira função em Clojure. As funções são parte importantíssima de uma linguagem funcional."]},{"tag":"br","content":null}]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Talvez pela sua origem acadêmica e fortemente influenciada pela matemática, as implementações de LISP levam muito a sério a questão da consistência."]},{"tag":"br","content":null}]},{"tag":"section","content":[{"tag":"text","content":["Explicando os parênteses"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["expressões numéricas"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Quando eu estava na quarta série, aprendi algo chamado de "]},{"tag":"italic","content":[{"tag":"text","content":["expressão numérica"]}]},{"tag":"text","content":[", que consiste em resolver um cálculo extenso atacando um pedaço por vez, organizadamente."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Cada pedaço desse cálculo fica dentro de parênteses, colchetes ou chaves, dependendo do quão aninhado esteja a expressão. Eu nunca mais vi esse tipo de hierarquia, mas sempre considerei como um jeito bacana de manter a organização."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Uma expressão numérica tem essa cara:"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["x = {1 + [3 * (5 + 7)]}"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Resolve a expressão de dentro para fora:"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["x = {1 + [3 * (12)]}"]},{"tag":"br","content":null},{"tag":"code-text","content":["x = {1 + [36]}"]},{"tag":"br","content":null},{"tag":"code-text","content":["x = {37}"]},{"tag":"br","content":null},{"tag":"code-text","content":["x = 37"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Simples, não?"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora vamos extrapolar o que aprendemos na quarta série para uma linguagem de programação, trocando chaves e colchetes por parênteses:"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["x = (1 + (3 * (5 + 7)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Vamos substituir a nossa conhecida notação infixa pela prefixa:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["x = (+ 1 (* 3 (+ 5 7)))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Pronto. Você tem uma expressão numérica com a cara do LISP, resolvendo da forma como a professora ensinou lá na quarta série: primeiro você resolve os parênteses de dentro, depois os próximos, até terminar. "]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Pode parecer estranho, mas não se preocupe, com o tempo essa notação não te trará dificuldades na leitura e entendimento do código. E há sim mais razões pela qual ela é dessa maneira, que desvendaremos aos poucos."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Qualquer LISP que você encontrar pela frente, incluindo o Clojure, funciona exatamente dessa maneira."]},{"tag":"br","content":null}]},{"tag":"index","content":[{"tag":"text","content":["precedência de operadores"]}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Uma vantagem que isso traz é que você não precisa ficar se preocupando com precedência de operadores. Imagine que você tem o código abaixo:"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["x = 3 * 2 + 1"]},{"tag":"br","content":null},{"tag":"code-text","content":["y = 1 + 2 * 3"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Os valores de "]},{"tag":"monospaced","content":[{"tag":"text","content":["x"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["y"]}]},{"tag":"text","content":[" serão iguais? Sim, ambas as variáveis contém o número "]},{"tag":"italic","content":[{"tag":"text","content":["7"]}]},{"tag":"text","content":[", mas para saber disso você precisou ler em algum outro lugar que "]},{"tag":"italic","content":[{"tag":"text","content":["o operador de multiplicação tem precedência sobre o operador de adição"]}]},{"tag":"text","content":[". É algo que você espera que seja assim e age como se realmente fosse."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["E o que aconteceria se você estiver usando uma linguagem em que a adição tem precedência sobre a multiplicação? Ou pior ainda: os operadores são executados da esquerda para a direita conforme forem aparecendo."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No primeiro caso, "]},{"tag":"monospaced","content":[{"tag":"text","content":["x"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["y"]}]},{"tag":"text","content":[" continuariam sendo iguais, mas ambos teriam o valor "]},{"tag":"italic","content":[{"tag":"text","content":["9"]}]},{"tag":"text","content":[". No segundo caso, "]},{"tag":"monospaced","content":[{"tag":"text","content":["x"]}]},{"tag":"text","content":[" seria igual a "]},{"tag":"italic","content":[{"tag":"text","content":["7"]}]},{"tag":"text","content":[" e "]},{"tag":"monospaced","content":[{"tag":"text","content":["y"]}]},{"tag":"text","content":[" seria igual a "]},{"tag":"italic","content":[{"tag":"text","content":["9"]}]},{"tag":"text","content":["."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Seria mais fácil se as expressões fossem escritas assim:"]},{"tag":"br","content":null}]},{"tag":"code","content":["javascript",{"tag":"br","content":null},{"tag":"code-text","content":["x = (3 * 2) + 1"]},{"tag":"br","content":null},{"tag":"code-text","content":["y = 1 + (2 * 3)"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Agora está claro para qualquer pessoa o que vai ser executado primeiro, independente do modo como a expressão seja interpretada pela linguagem. Pois saiba que é exatamente assim que um LISP trabalha. Usando a notação prefixa, as expressões acima ficariam da forma a seguir, que você pode testar usando o REPL:"]},{"tag":"br","content":null}]},{"tag":"code","content":["clojure",{"tag":"br","content":null},{"tag":"code-text","content":["(+ (* 3 2) 1)"]},{"tag":"br","content":null},{"tag":"code-text","content":["(+ 1 (* 3 2))"]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["Primeiro será executada a multiplicação, que está nos parênteses mais internos e, em seguida, será executada a adição. Tudo isso sem se preocupar com regras ocultas ou peculiaridades do compilador."]},{"tag":"br","content":null}]},{"tag":"paragraph","content":[{"tag":"text","content":["No capítulo a seguir, vamos aprender mais sobre o REPL para que possamos utilizar Clojure de uma forma rápida e produtiva."]}]}]}